priors_exponent,
num_species = "pairs",
last_name = "poisson") {
for (i in 1:length(formulas)) {
if (names(formulas)[[i]] == "hs") {
model <- brm(
formula = formulas[[i]],
prior = priors_exponent,
data =  data,
family = family,
iter = 4000,
warmup = 2000,
cores   = 4,
chains  = 4,
inits   = 1
)
id <- paste0("model_objects/",focal, "_", names(formulas)[[i]], "_", num_species, "_", last_name,".rds")
saveRDS(model, file = id)
} else{
model <- brm(
formula = formulas[[i]],
prior = priors,
data =  data,
family = family,
iter = 4000,
warmup = 2000,
cores   = 4,
chains  = 4,
inits   = 1
)
id <- paste0("model_objects/",focal, "_", names(formulas)[[i]], "_", num_species, "_", last_name,".rds")
saveRDS(model, file = id)
}
}
}
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_pairs,
priors = prior_pairs,
priors_exponent = prior_exp_pairs,
num_species = "pairs",
last_name = "poisson"
)
formulas_pairs <- list( bh = beverton_holt, rc = ricker, hs = hassell, lv = lotka_volterra, st =stouffer)
#For species pairs, using a poisson distribution
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_pairs,
priors = prior_pairs,
priors_exponent = prior_exp_pairs,
num_species = "pairs",
last_name = "poisson"
)
formulas_pairs <- list( bh = beverton_holt)
#For species pairs, using a poisson distribution
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_pairs,
priors = prior_pairs,
priors_exponent = prior_exp_pairs,
num_species = "pairs",
last_name = "poisson"
)
distribution = poisson(link = "identity")
distribution
poisson(link = "identity")
i<-1
priors <- prior_pairs
data <- vero_focal
model_fits <-
function(focal = "species_name",
data,
distribution = poisson(link = "identity"),
formulas,
priors,
priors_exponent,
num_species = "pairs",
last_name = "poisson") {
for (i in 1:length(formulas)) {
if (names(formulas)[[i]] == "hs") {
model <- brm(
formula = formulas[[i]],
prior = priors_exponent,
data =  data,
family = distribution,
iter = 4000,
warmup = 2000,
cores   = 4,
chains  = 4,
inits   = 1
)
id <- paste0("model_objects/",focal, "_", names(formulas)[[i]], "_", num_species, "_", last_name,".rds")
saveRDS(model, file = id)
} else{
model <- brm(
formula = formulas[[i]],
prior = priors,
data =  data,
family = distribution,
iter = 4000,
warmup = 2000,
cores   = 4,
chains  = 4,
inits   = 1
)
id <- paste0("model_objects/",focal, "_", names(formulas)[[i]], "_", num_species, "_", last_name,".rds")
saveRDS(model, file = id)
}
}
}
formulas_pairs <- list( bh = beverton_holt)
#For species pairs, using a poisson distribution
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_pairs,
priors = prior_pairs,
priors_exponent = prior_exp_pairs,
num_species = "pairs",
last_name = "poisson"
)
formulas_pairs <- list( bh = beverton_holt, rc = ricker, hs = hassell, lv = lotka_volterra, st =stouffer)
stouffer <-bf(
totalseeds~ exp(lambda) * (1 - (alphaii*conspecifics) - (alphaij*heterospecifics) ) *
( (1- exp(exp(beta)* (conspecifics + 1) )) /
( exp(beta) * (conspecifics+1) )) ,
lambda  ~ 1 + env,
alphaii ~ 1 + env,
alphaij ~ 1 + env,
nl=T
)
###Model fits for species vero
library(brms)
source("code/clean_data.R")
#we remove trcy just to be sure
rm(trcy_focal)
source("code/models/set_priors.R")
source("code/models/model_formulas_pairs.R")
source("code/models/automate_fit.R")
formulas_pairs <- list( bh = beverton_holt, rc = ricker, hs = hassell, lv = lotka_volterra, st =stouffer)
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_pairs,
priors = prior_pairs,
priors_exponent = prior_exp_pairs,
num_species = "pairs",
last_name = "poisson"
)
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_pairs,
priors = prior_pairs,
priors_exponent = prior_exp_pairs,
num_species = "pairs",
last_name = "poisson"
)
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_pairs,
priors = prior_pairs,
priors_exponent = prior_exp_pairs,
num_species = "pairs",
last_name = "poisson"
)
model_fits <-
function(focal = "species_name",
data,
distribution = poisson(link = "identity"),
formulas,
priors,
priors_exponent,
num_species = "pairs",
last_name = "poisson") {
for (i in 1:length(formulas)) {
if (names(formulas)[[i]] == "hs" | names(formulas)[[i]] == "st") {
model <- brm(
formula = formulas[[i]],
prior = priors_exponent,
data =  data,
family = distribution,
iter = 4000,
warmup = 2000,
cores   = 4,
chains  = 4,
inits   = 1
)
id <- paste0("model_objects/",focal, "_", names(formulas)[[i]], "_", num_species, "_", last_name,".rds")
saveRDS(model, file = id)
} else{
model <- brm(
formula = formulas[[i]],
prior = priors,
data =  data,
family = distribution,
iter = 4000,
warmup = 2000,
cores   = 4,
chains  = 4,
inits   = 1
)
id <- paste0("model_objects/",focal, "_", names(formulas)[[i]], "_", num_species, "_", last_name,".rds")
saveRDS(model, file = id)
}
}
}
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_pairs,
priors = prior_pairs,
priors_exponent = prior_exp_pairs,
num_species = "pairs",
last_name = "poisson"
)
vero_lv_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_lv_pairs_poisson.rds")
vero_lv_pairs_poisson
plot(vero_lv_pairs_poisson)
conditional_effects(vero_lv_pairs_poisson)
exp(1.76)
formulas_pairs <- list(st =stouffer)
#For species pairs, using a poisson distribution
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_pairs,
priors = prior_pairs,
priors_exponent = prior_exp_pairs,
num_species = "pairs",
last_name = "poisson"
)
library(brms)
source("code/clean_data.R")
source("code/models/set_priors.R")
source("code/models/model_formulas_pairs.R")
source("code/models/automate_fit.R")
formulas_pairs <- list(st =stouffer)
#For species pairs, using a poisson distribution
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_pairs,
priors = prior_pairs,
priors_exponent = prior_exp_pairs,
num_species = "pairs",
last_name = "poisson"
)
vero_st_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_st_pairs_poisson.rds")
vero_st_pairs_poisson
plot(vero_st_pairs_poisson)
vero_hs_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_hs_pairs_poisson.rds")
vero_hs_pairs_poisson
plot(vero_st_pairs_poisson)
prior(normal(0, 10), nlpar = "alphaii"),
prior(normal(0, 10), nlpar = "alphaij"),
prior(normal(0, 10), nlpar = "lambda"),
prior(normal(0, 1), nlpar = "beta")
)
prior_exp_pairs = c(
prior(normal(0, 10), nlpar = "alphaii"),
prior(normal(0, 10), nlpar = "alphaij"),
prior(normal(0, 10), nlpar = "lambda"),
prior(normal(0, 1), nlpar = "beta")
)
formulas_pairs <- list(st =stouffer)
#For species pairs, using a poisson distribution
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_pairs,
priors = prior_pairs,
priors_exponent = prior_exp_pairs,
num_species = "pairs",
last_name = "poisson"
)
vero_st_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_st_pairs_poisson.rds")
plot(vero_st_pairs_poisson)
exp(-6)
vero_st_pairs_poisson
exp(-4.10)
vero_lv_pairs_poisson
stouffer <-bf(
totalseeds~ (exp(lambda) * (1 - (alphaii*conspecifics) - (alphaij*heterospecifics) ) ) *
( (1- exp(beta* (conspecifics + 1) )) / ( beta * (conspecifics+1) )) ,
lambda  ~ 1 + env,
alphaii ~ 1 + env,
alphaij ~ 1 + env,
beta    ~ 1 + env,
nl=T
)
formulas_pairs <- list(st =stouffer)
#For species pairs, using a poisson distribution
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_pairs,
priors = prior_pairs,
priors_exponent = prior_exp_pairs,
num_species = "pairs",
last_name = "poisson"
)
vero_st_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_st_pairs_poisson.rds")
plot(vero_st_pairs_poisson)
vero_st_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_st_pairs_poisson.rds")
vero_rc_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_rc_pairs_poisson.rds")
vero_lv_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_lv_pairs_poisson.rds")
vero_hs_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_hs_pairs_poisson.rds")
vero_bh_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_bh_pairs_poisson.rds")
cc<-function(m1,m2,m3,m4){
m1<-add_criterion(m1, "waic")
m2<-add_criterion(m2, "waic")
m3<-add_criterion(m3, "waic")
m4<-add_criterion(m4, "waic")
w<-loo_compare(m1,m2,m3,m4,criterion="waic")
print(w)
m<-model_weights(m1,m2,m3,m4,weights="waic")
print(m)
}
cc<-function(m1,m2,m3,m4,m5){
m1<-add_criterion(m1, "waic")
m2<-add_criterion(m2, "waic")
m3<-add_criterion(m3, "waic")
m4<-add_criterion(m4, "waic")
m5<-add_criterion(m4, "waic")
w<-loo_compare(m1,m2,m3,m4,m5,criterion="waic")
print(w)
m<-model_weights(m1,m2,m3,m4,m5,weights="waic")
print(m)
}
cc(vero_bh_pairs_poisson,vero_rc_pairs_poisson,vero_hs_pairs_poisson, vero_lv_pairs_poisson,vero_st_pairs_poisson)
vero_bh_pairs_poisson
plot(vero_bh_pairs_poisson)
exp(2.05)
vero_rc_pairs_poisson
exp(1.92)
plot(vero_rc_pairs_poisson)
exp(1.92 + 0.23)
exp(1.92 ) +exp(0.23)
vero_hs_pairs_poisson
exp(2.49)
plot(vero_hs_pairs_poisson)
exp(-1.52)
vero_lv_pairs_poisson
exp(1.76)
print(vero_lv_pairs_poisson, digits=4)
c2<-function(m1,m2){
m1<-add_criterion(m1, "waic")
m2<-add_criterion(m2, "waic")
w<-loo_compare(m1,m2,criterion="waic")
print(w)
m<-model_weights(m1,m2,weights="waic")
print(m)
}
c2(vero_lv_pairs_poisson, vero_st_pairs_poisson)
c2(vero_rc_pairs_poisson, vero_st_pairs_poisson)
vero_st_pairs_poisson
plot(vero_st_pairs_poisson)
c2(vero_hs_pairs_poisson, vero_st_pairs_poisson)
exp(-0.57)
stouffer <-bf(
totalseeds~ (exp(lambda) * (1 - ( exp(alphaii)*conspecifics) - (exp(alphaij)*heterospecifics) ) ) *
( (1- exp( exp(beta)* (conspecifics + 1) )) / ( exp(beta) * (conspecifics+1) )) ,
lambda  ~ 1 + env,
alphaii ~ 1 + env,
alphaij ~ 1 + env,
beta    ~ 1 + env,
nl=T
)
formulas_pairs <- list( st =stouffer)
#For species pairs, using a poisson distribution
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_pairs,
priors = prior_pairs,
priors_exponent = prior_exp_pairs,
num_species = "pairs",
last_name = "poisson"
)
###Model fits for species vero
library(brms)
source("code/clean_data.R")
source("code/models/set_priors.R")
source("code/models/model_formulas_pairs.R")
source("code/models/automate_fit.R")
### We create lists of formulas on which to iterate
formulas_pairs <- list( st =stouffer)
#For species pairs, using a poisson distribution
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_pairs,
priors = prior_pairs,
priors_exponent = prior_exp_pairs,
num_species = "pairs",
last_name = "poisson"
)
plot(vero_st_pairs_poisson)
vero_st_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_st_pairs_poisson.rds")
plot(vero_st_pairs_poisson)
stouffer <-bf(
totalseeds~ (exp(lambda) * (1 - ( alphaii*conspecifics) - (alphaij*heterospecifics) ) ) *
( (1- exp( exp(beta)* (conspecifics + 1) )) / ( exp(beta) * (conspecifics+1) )) ,
lambda  ~ 1 + env,
alphaii ~ 1 + env,
alphaij ~ 1 + env,
beta    ~ 1 + env,
nl=T
)
###Model fits for species vero
library(brms)
source("code/clean_data.R")
source("code/models/set_priors.R")
source("code/models/model_formulas_pairs.R")
source("code/models/automate_fit.R")
formulas_pairs <- list(st =stouffer)
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_pairs,
priors = prior_pairs,
priors_exponent = prior_exp_pairs,
num_species = "pairs",
last_name = "poisson"
)
vero_st_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_st_pairs_poisson.rds")
plot(vero_st_pairs_poisson)
prior_multi= c(
prior(normal(0, 10), nlpar = "alphaii"),
prior(normal(0, 10), nlpar = "alphaij"),
prior(normal(0, 10), nlpar = "lambda"),
prior(normal(0, 10), nlpar = "alphaik")
)
library(brms)
source("code/clean_data.R")
source("code/models/set_priors.R")
source("code/models/model_formulas_pairs.R")
source("code/models/automate_fit.R")
formulas_pairs <- list(  st =stouffer)
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_pairs,
priors = prior_pairs,
priors_exponent = prior_exp_pairs,
num_species = "pairs",
last_name = "poisson"
)
vero_st_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_st_pairs_poisson.rds")
vero_st_pairs_poisson
plot(vero_st_pairs_poisson)
exp(-22)
library(brms)
source("code/clean_data.R")
source("code/models/set_priors.R")
source("code/models/model_formulas_pairs.R")
source("code/models/automate_fit.R")
### We create lists of formulas on which to iterate
formulas_pairs <- list( bh = beverton_holt, rc = ricker, hs = hassell, lv = lotka_volterra, st =stouffer)
formulas_multi <- list( bh = beverton_holt_multi, rc = ricker_multi, hs = hassell_multi, lv = lotka_volterra_multi, st =stouffer_multi)
library(brms)
source("code/clean_data.R")
source("code/models/set_priors.R")
source("code/models/model_formulas_pairs.R")
source("code/models/model_formulas_multi.R")
source("code/models/automate_fit.R")
### We create lists of formulas on which to iterate
formulas_pairs <- list( bh = beverton_holt, rc = ricker, hs = hassell, lv = lotka_volterra, st =stouffer)
formulas_multi <- list( bh = beverton_holt_multi, rc = ricker_multi, hs = hassell_multi, lv = lotka_volterra_multi, st =stouffer_multi)
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_multi,
priors = prior_multi,
priors_exponent = prior_exp_multi,
num_species = "multispecies",
last_name = "poisson"
)
###Model fits for species vero
library(brms)
source("code/clean_data.R")
source("code/models/set_priors.R")
source("code/models/model_formulas_pairs.R")
source("code/models/model_formulas_multi.R")
source("code/models/automate_fit.R")
### We create lists of formulas on which to iterate
formulas_pairs <- list( bh = beverton_holt, rc = ricker, hs = hassell, lv = lotka_volterra, st =stouffer)
formulas_multi <- list( bh = beverton_holt_multi, rc = ricker_multi, hs = hassell_multi, lv = lotka_volterra_multi, st =stouffer_multi)
library(brms)
source("code/clean_data.R")
