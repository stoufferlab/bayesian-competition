Omega <- function(alpha){
n <- nrow(alpha)
Sigma <-solve(t(alpha) %*% alpha)
d <- pmvnorm(lower = rep(0,n), upper = rep(Inf,n), mean = rep(0,n), sigma = Sigma)
out <- log10(d[1]) + n * log10(2)
return(out)
}
library(tidyverse)
library(mvtnorm)
library(mgcv)
r_centroid <- function(alpha){
n <- nrow(alpha)
D <- diag(1/sqrt(diag(t(alpha)%*%alpha)))
alpha_n <- alpha %*% D
r_c <- rowSums(alpha_n) /n
r_c <- t(t(r_c))
return(r_c)
}
theta <- function(alpha,r){
r_c <- r_centroid(alpha)
out <- acos(sum(r_c*r)/(sqrt(sum(r^2))*sqrt(sum(r_c^2))))*180/pi
return(out)
}
test_feasibility <- function(alpha,r){
out <- prod(solve(alpha,r)>0)
return(out)
}
compute_overlap <- function(alpha,Nrand){
n <- dim(alpha)[1]
counter_f <- 0
counter_overlap <- 0
counter_all <- 0
for (i in 1:Nrand){
r_rand <- abs(rnorm(n))
r_rand <- r_rand/sqrt(sum(r_rand^2))
f1 <- test_feasibility(alpha,r_rand)
f2 <- test_feasibility_pairs(alpha,r_rand)$feasibility
counter_f <- counter_f + f1
counter_all <- counter_all + prod(f2)
counter_overlap <- counter_overlap + f1*prod(f2)
}
Omega <- counter_f/Nrand
Omega_all <- counter_all/Nrand
overlap <- counter_overlap/Nrand
out <- list(Omega = Omega, Omega_all = Omega_all, overlap = overlap)
return(out)
}
spit_values<-function(vero_model,trcy_model,titulo){
gi<-.372
si<-.556
gj<-.258
sj<-.033
params_vero<-fixed_model(vero_model)
params_trcy<-fixed_model(trcy_model)
#aii #alphaij
#aji #alphajj
alpha<-matrix(c(params_vero$alphaii_Intercept,params_trcy$alphaji_Intercept,params_vero$alphaij_Intercept,params_trcy$alphajj_Intercept),ncol = 2,nrow=2)
#this has to change if you change models!
r1<-bev_growth(si,gi,params_vero$lambdai_Intercept)
r2<-bev_growth(sj,gj,params_trcy$lambdaj_Intercept)
values<-list(apha,r1,r2)
return(values)
}
BEV_vero <- readRDS("~/bayesian-competition/BEV_vero.RDS")
BEV_trcy <- readRDS("~/bayesian-competition/BEV_trcy.RDS")
require(mvtnorm)
require(brms)
spit_values<-function(vero_model,trcy_model,titulo){
gi<-.372
si<-.556
gj<-.258
sj<-.033
params_vero<-fixed_model(vero_model)
params_trcy<-fixed_model(trcy_model)
#aii #alphaij
#aji #alphajj
alpha<-matrix(c(params_vero$alphaii_Intercept,params_trcy$alphaji_Intercept,params_vero$alphaij_Intercept,params_trcy$alphajj_Intercept),ncol = 2,nrow=2)
#this has to change if you change models!
r1<-bev_growth(si,gi,params_vero$lambdai_Intercept)
r2<-bev_growth(sj,gj,params_trcy$lambdaj_Intercept)
values<-list(apha,r1,r2)
return(values)
}
values<-spit_values(BEV_vero,BEV_trcy)
fixed_model<-function(model){
model_coef<-fixef(model)
coef<-as.matrix(model_coef[,1])
coef<-t(coef)
params<-as.data.frame(coef)
return(params)
}
values<-spit_values(BEV_vero,BEV_trcy)
source("code/extract_params.R")
source("code/growth_rates.R")
getwd()
setwd("/home/alba/bayesian-competition")
source("code/extract_params.R")
source("code/growth_rates.R")
spit_values<-function(vero_model,trcy_model,titulo){
gi<-.372
si<-.556
gj<-.258
sj<-.033
params_vero<-fixed_model(vero_model)
params_trcy<-fixed_model(trcy_model)
#aii #alphaij
#aji #alphajj
alpha<-matrix(c(params_vero$alphaii_Intercept,params_trcy$alphaji_Intercept,params_vero$alphaij_Intercept,params_trcy$alphajj_Intercept),ncol = 2,nrow=2)
#this has to change if you change models!
r1<-bev_growth(si,gi,params_vero$lambdai_Intercept)
r2<-bev_growth(sj,gj,params_trcy$lambdaj_Intercept)
values<-list(apha,r1,r2)
return(values)
}
values<-spit_values(BEV_vero,BEV_trcy)
spit_values<-function(vero_model,trcy_model,titulo){
gi<-.372
si<-.556
gj<-.258
sj<-.033
params_vero<-fixed_model(vero_model)
params_trcy<-fixed_model(trcy_model)
#aii #alphaij
#aji #alphajj
alpha<-matrix(c(params_vero$alphaii_Intercept,params_trcy$alphaji_Intercept,params_vero$alphaij_Intercept,params_trcy$alphajj_Intercept),ncol = 2,nrow=2)
#this has to change if you change models!
r1<-bev_growth(si,gi,params_vero$lambdai_Intercept)
r2<-bev_growth(sj,gj,params_trcy$lambdaj_Intercept)
values<-list(alpha,r1,r2)
return(values)
}
values<-spit_values(BEV_vero,BEV_trcy)
values
values[1]
alpha <- values[1]
r1    <- values[2]
r2    <- values[3]
alpha
class(alpha)
spit_values<-function(vero_model,trcy_model,titulo){
gi<-.372
si<-.556
gj<-.258
sj<-.033
params_vero<-fixed_model(vero_model)
params_trcy<-fixed_model(trcy_model)
#aii #alphaij
#aji #alphajj
alpha<-matrix(c(params_vero$alphaii_Intercept,params_trcy$alphaji_Intercept,params_vero$alphaij_Intercept,params_trcy$alphajj_Intercept),ncol = 2,nrow=2)
#this has to change if you change models!
r1<-bev_growth(si,gi,params_vero$lambdai_Intercept)
r2<-bev_growth(sj,gj,params_trcy$lambdaj_Intercept)
values<-c(alpha,r1,r2)
return(values)
}
values<-spit_values(BEV_vero,BEV_trcy)
vallues
values
spit_values<-function(vero_model,trcy_model,titulo){
gi<-.372
si<-.556
gj<-.258
sj<-.033
params_vero<-fixed_model(vero_model)
params_trcy<-fixed_model(trcy_model)
#aii #alphaij
#aji #alphajj
alpha<-matrix(c(params_vero$alphaii_Intercept,params_trcy$alphaji_Intercept,params_vero$alphaij_Intercept,params_trcy$alphajj_Intercept),ncol = 2,nrow=2)
#this has to change if you change models!
r1<-bev_growth(si,gi,params_vero$lambdai_Intercept)
r2<-bev_growth(sj,gj,params_trcy$lambdaj_Intercept)
values<-list(alpha,r1,r2)
return(values)
}
values<-spit_values(BEV_vero,BEV_trcy)
alpha <- values[1]
r1    <- values[2]
r2    <- values[3]
alpha <- as.matrix(values[1])
r1    <- values[2]
r2    <- values[3]
alpha
spit_alphas<-function(vero_model,trcy_model,titulo){
params_vero<-fixed_model(vero_model)
params_trcy<-fixed_model(trcy_model)
#aii #alphaij
#aji #alphajj
alpha<-matrix(c(params_vero$alphaii_Intercept,params_trcy$alphaji_Intercept,params_vero$alphaij_Intercept,params_trcy$alphajj_Intercept),ncol = 2,nrow=2)
return(alpha)
}
spit_alphas<-function(vero_model,trcy_model,titulo){
gi<-.372
si<-.556
gj<-.258
sj<-.033
params_vero<-fixed_model(vero_model)
params_trcy<-fixed_model(trcy_model)
#aii #alphaij
#aji #alphajj
#this has to change if you change models!
r1<-bev_growth(si,gi,params_vero$lambdai_Intercept)
r2<-bev_growth(sj,gj,params_trcy$lambdaj_Intercept)
values<-list(r1,r2)
return(values)
}
spit_alphas<-function(vero_model,trcy_model){
params_vero<-fixed_model(vero_model)
params_trcy<-fixed_model(trcy_model)
#aii #alphaij
#aji #alphajj
alpha<-matrix(c(params_vero$alphaii_Intercept,params_trcy$alphaji_Intercept,params_vero$alphaij_Intercept,params_trcy$alphajj_Intercept),ncol = 2,nrow=2)
return(alpha)
}
spit_alphas<-function(vero_model,trcy_model){
gi<-.372
si<-.556
gj<-.258
sj<-.033
params_vero<-fixed_model(vero_model)
params_trcy<-fixed_model(trcy_model)
#aii #alphaij
#aji #alphajj
#this has to change if you change models!
r1<-bev_growth(si,gi,params_vero$lambdai_Intercept)
r2<-bev_growth(sj,gj,params_trcy$lambdaj_Intercept)
values<-list(r1,r2)
return(values)
}
alpha<- spit_alphas(BEV_vero,BEV_trcy)
alpha
spit_alphas<-function(vero_model,trcy_model){
params_vero<-fixed_model(vero_model)
params_trcy<-fixed_model(trcy_model)
#aii #alphaij
#aji #alphajj
alpha<-matrix(c(params_vero$alphaii_Intercept,params_trcy$alphaji_Intercept,params_vero$alphaij_Intercept,params_trcy$alphajj_Intercept),ncol = 2,nrow=2)
return(alpha)
}
spit_growth<-function(vero_model,trcy_model){
gi<-.372
si<-.556
gj<-.258
sj<-.033
params_vero<-fixed_model(vero_model)
params_trcy<-fixed_model(trcy_model)
#aii #alphaij
#aji #alphajj
#this has to change if you change models!
r1<-bev_growth(si,gi,params_vero$lambdai_Intercept)
r2<-bev_growth(sj,gj,params_trcy$lambdaj_Intercept)
values<-c(r1,r2)
return(values)
}
alpha<- spit_alphas(BEV_vero,BEV_trcy)
alpha
class(alpha)
r1<-  spit_alphas(BEV_vero,BEV_trcy)
r1
r1    <-  spit_growth(BEV_vero,BEV_trcy)
r1
alpha <- spit_alphas(BEV_vero,BEV_trcy)
r1    <-  spit_growth(BEV_vero,BEV_trcy)[1]
r1
r2    <-  spit_growth(BEV_vero,BEV_trcy)[2]
Omega_song <- function(alpha) {
S <- nrow(alpha)
omega <- function(S, Sigma) {
m <- matrix(0, S, 1)
a <- matrix(0, S, 1)
b <- matrix(Inf, S, 1)
d <- pmvnorm(lower = rep(0, S), upper = rep(Inf, S), mean = rep(0, S), sigma = Sigma)
out <- d[1]^(1 / S)
return(out)
}
#   if (length(which(diag(alpha) == 0)) == 0) {
#     Sigma <- chol2inv(alpha, size = NCOL(alpha), LINPACK = FALSE)
#     return(omega(S, Sigma))
#   }
#   else {
f <- function(m) class(try(solve(t(m) %*% m), silent = T)) == "matrix"
if (f(alpha) == FALSE) {
return(0)
}
else {
Sigma <- solve(t(alpha) %*% alpha)
return(omega(S, Sigma))
}
#   }
# }
}
Omega_song(alpha)
Omega_saa<- function(alpha){
n <- nrow(alpha)
Sigma <-solve(t(alpha) %*% alpha)
d <- pmvnorm(lower = rep(0,n), upper = rep(Inf,n), mean = rep(0,n), sigma = Sigma)
out <- log10(d[1]) + n * log10(2)
return(out)
}
Omega_saa(alpha)
Omega_saa<- function(alpha){
n <- nrow(alpha)
Sigma <-solve(t(alpha) %*% alpha)
d <- pmvnorm(lower = rep(0,n), upper = rep(Inf,n), mean = rep(0,n), sigma = Sigma)
out <- log10(d[1]) + n * log10(2)
return(d[1])
}
Omega_saa(alpha)
Omega_saa<- function(alpha){
n <- nrow(alpha)
Sigma <-solve(t(alpha) %*% alpha)
d <- pmvnorm(lower = rep(0,n), upper = rep(Inf,n), mean = rep(0,n), sigma = Sigma)
out <- log10(d[1]) + n * log10(2)
return(out)
}
Omega_saa(alpha)
Omega_alb<- function(alpha){
n <- nrow(alpha)
Sigma <-solve(t(alpha) %*% alpha)
d <- pmvnorm(lower = rep(0,n), upper = rep(Inf,n), mean = rep(0,n), sigma = Sigma)
out <- log10(d[1]) + n * log10(2)
return(exp(out))
}
Omega_alb(alpha)
Omega_alb(alpha)*.5
Omega_song(alpha)
