AA<-apply(X = preds, MARGIN = 1,FUN = deviance_residuals(y=preds$totalseeds, mu=preds$.prediction, wt=1))
AA<-apply(X = preds, MARGIN = 1,FUN = deviance_residuals(y=preds$totalseeds, mu=preds$.prediction, wt=1))
devs <- do.call(deviance_residuals(),args = c(y=preds$totalseeds, mu=preds$.prediction, wt=1))
devs <- do.call(deviance_residuals(),args = list(y=preds$totalseeds, mu=preds$.prediction, wt=1))
?do.call
tmp <- expand.grid(letters[1:2], 1:3, c("+", "-"))
do.call("paste", c(tmp, sep = ""))
tmp <- expand.grid(letters[1:2], 1:3, c("+", "-"))
tmp
tmp <- expand.grid(letters[1:2], 1:3, c("+", "-"))
do.call("paste", c(tmp, sep = ""))
devs <- do.call(deviance_residuals(),args = list(y=preds$totalseeds, mu=preds$.prediction, wt=1))
devs <- do.call(deviance_residuals, c(y=preds$totalseeds, mu=preds$.prediction, wt=1))
deviance_residuals<-function (data) {
y <- data$totalseeds
mu <- data$.prediction
wt <-1
r <- mu * wt
p <- which(y > 0)
r[p] <- (wt * (y * log(y/mu) - (y - mu)))[p]
2 * r
}
devs <- deviance_residuals(preds)
devs
prediction_quantiles<- function(model, data){
data$total_competition <- data$conspecifics + data$heterospecifics
preds <- data %>% add_predicted_draws(model)  %>% mutate( res =  (totalseeds - .prediction))
preds_2 <- preds %>% mutate(stat_res = res/.prediction)
res    <- add_residual_draws( newdata = data, model=model)
devs <- deviance_residuals(preds)
preds_2 <- preds_2 %>% mutate( deviance = devs)
p<- ggplot(preds, aes(y=totalseeds, x=total_competition, shape = as.factor(env))) +
geom_point(col= rethinking::col.alpha("dodgerblue",.7)) +
theme_bw() +
stat_pointinterval(aes(x=total_competition,y=.prediction),  col= rethinking::col.alpha("grey50", alpha = 0.5) )
p2 <- ggplot(preds)+
stat_pointinterval(aes(x=totalseeds, y=.prediction), col="dodgerblue2") +
theme_bw() +
ylim(0,40) +
geom_abline(slope = 1, intercept = 0, col= "grey50")
p3 <-  ggplot(preds_2) +  stat_pointinterval(aes(x=totalseeds, y= stat_res), col="dodgerblue2") +
theme_bw() + ylim(-10,30) +
stat_pointinterval(aes(x=totalseeds, y= .residual), col="grey50", data = res) +
stat_pointinterval(aes(x=totalseeds, y= deviance), col="firebrick")
print(p)
print(p2)
print(p3)
}
prediction_quantiles<- function(model, data){
data$total_competition <- data$conspecifics + data$heterospecifics
preds <- data %>% add_predicted_draws(model)  %>% mutate( res =  (totalseeds - .prediction))
preds_2 <- preds %>% mutate(stat_res = res/.prediction)
res    <- add_residual_draws( newdata = data, model=model)
devs <- deviance_residuals(preds)
preds_2 <- preds_2 %>% mutate( deviance = devs)
p<- ggplot(preds, aes(y=totalseeds, x=total_competition, shape = as.factor(env))) +
geom_point(col= rethinking::col.alpha("dodgerblue",.7)) +
theme_bw() +
stat_pointinterval(aes(x=total_competition,y=.prediction),  col= rethinking::col.alpha("grey50", alpha = 0.5) )
p2 <- ggplot(preds)+
stat_pointinterval(aes(x=totalseeds, y=.prediction), col="dodgerblue2") +
theme_bw() +
ylim(0,40) +
geom_abline(slope = 1, intercept = 0, col= "grey50")
p3 <-  ggplot(preds_2) +  stat_pointinterval(aes(x=totalseeds, y= stat_res), col="dodgerblue2") +
theme_bw() + ylim(-10,30) +
stat_pointinterval(aes(x=totalseeds, y= .residual), col="grey50", data = res) +
stat_pointinterval(aes(x=totalseeds, y= deviance), col="firebrick")
#print(p)
#print(p2)
print(p3)
}
prediction_quantiles(BEV_vero, vero_focal)
preds_2 <- preds_2 %>% mutate(deviance= deviance_residuals(preds_2))
data
data$total_competition <- data$conspecifics + data$heterospecifics
preds <- data %>% add_predicted_draws(model)  %>% mutate( res =  (totalseeds - .prediction))
preds_2 <- preds %>% mutate(stat_res = res/.prediction)
preds_2 <- preds_2 %>% mutate(deviance= deviance_residuals(preds_2))
deviance_residuals<-function (y, mu, wt) {
r <- mu * wt
p <- which(y > 0)
r[p] <- (wt * (y * log(y/mu) - (y - mu)))[p]
2 * r
}
preds_2[totalseeds,.prediction]
(preds_2[,c(totalseeds,.prediction)]
)
preds_2[,totalseeds]
preds_2[totalseeds]
preds_2[totalseeds,]
preds_2$totalseeds
preds_2[1]
preds_2[2]
preds_2[verotreatment]
?mapply
dim(dev)
devs <- deviance_residuals(preds)
devs <- deviance_residuals(preds$totalseeds, preds$.prediction, wt=1)
devs
dim(devs)
length(devs)
nrow(preds_2)
preds_2$deviance <-1
preds_2$deviance
preds_2$deviance <- devs
preds_2$deviance
prediction_quantiles<- function(model, data){
data$total_competition <- data$conspecifics + data$heterospecifics
preds <- data %>% add_predicted_draws(model)  %>% mutate( res =  (totalseeds - .prediction))
preds_2 <- preds %>% mutate(stat_res = res/.prediction)
res    <- add_residual_draws( newdata = data, model=model)
devs <- deviance_residuals(preds$totalseeds, preds$.prediction, wt=1)
preds_2$deviance <- devs
p<- ggplot(preds, aes(y=totalseeds, x=total_competition, shape = as.factor(env))) +
geom_point(col= rethinking::col.alpha("dodgerblue",.7)) +
theme_bw() +
stat_pointinterval(aes(x=total_competition,y=.prediction),  col= rethinking::col.alpha("grey50", alpha = 0.5) )
p2 <- ggplot(preds)+
stat_pointinterval(aes(x=totalseeds, y=.prediction), col="dodgerblue2") +
theme_bw() +
ylim(0,40) +
geom_abline(slope = 1, intercept = 0, col= "grey50")
p3 <-  ggplot(preds_2) +  stat_pointinterval(aes(x=totalseeds, y= stat_res), col="dodgerblue2") +
theme_bw() + ylim(-10,30) +
stat_pointinterval(aes(x=totalseeds, y= .residual), col="grey50", data = res) +
stat_pointinterval(aes(x=totalseeds, y= deviance), col="firebrick")
#print(p)
#print(p2)
print(p3)
}
prediction_quantiles(BEV_vero, vero_focal)
prediction_quantiles<- function(model, data){
data$total_competition <- data$conspecifics + data$heterospecifics
preds <- data %>% add_predicted_draws(model)  %>% mutate( res =  (totalseeds - .prediction))
preds_2 <- preds %>% mutate(stat_res = res/.prediction)
res    <- add_residual_draws( newdata = data, model=model)
devs <- deviance_residuals(preds$totalseeds, preds$.prediction, wt=1)
preds_2$deviance <- devs
p<- ggplot(preds, aes(y=totalseeds, x=total_competition, shape = as.factor(env))) +
geom_point(col= rethinking::col.alpha("dodgerblue",.7)) +
theme_bw() +
stat_pointinterval(aes(x=total_competition,y=.prediction),  col= rethinking::col.alpha("grey50", alpha = 0.5) )
p2 <- ggplot(preds)+
stat_pointinterval(aes(x=totalseeds, y=.prediction), col="dodgerblue2") +
theme_bw() +
ylim(0,40) +
geom_abline(slope = 1, intercept = 0, col= "grey50")
p3 <-  ggplot(preds_2) +  stat_pointinterval(aes(x=totalseeds, y= stat_res), col="dodgerblue2") +
theme_bw() + ylim(-10,30) +
# stat_pointinterval(aes(x=totalseeds, y= .residual), col="grey50", data = res) +
stat_pointinterval(aes(x=totalseeds, y= deviance), col="firebrick")
#print(p)
#print(p2)
print(p3)
}
prediction_quantiles(BEV_vero, vero_focal)
data
res <-residuals(BEV_vero)
RES
res
plot(data$totalseeds, res[1,], pch=17, col="grey50")
res <-residuals(BEV_vero)
plot(data$totalseeds, res[,1], pch=17, col="grey50")
pred <- data$totalseeds - res[,1]
pred
stat_res <- res[,1]/pred
stat_res
points(data$totalseeds,stat_res, pch=17, col="dodgerblue2")
dev_res  <- deviance_residuals(y=data$totalseeds, mu=pred, wt=1)
dev_res
points(data$totalseeds, dev_res, pch=17, col"firebrick")
points(data$totalseeds, dev_res, pch=17, col="firebrick")
res <-residuals(BEV_vero)
pred <- data$totalseeds - res[,1]
stat_res <- res[,1]/pred
dev_res  <- deviance_residuals(y=data$totalseeds, mu=pred, wt=1)
plot(data$totalseeds, res[,1], pch=17, col="grey50", ylim=c(0,50))
points(data$totalseeds,stat_res, pch=17, col="dodgerblue2")
points(data$totalseeds, dev_res, pch=17, col="firebrick")
res <-residuals(BEV_vero)
pred <- data$totalseeds - res[,1]
stat_res <- res[,1]/pred
dev_res  <- deviance_residuals(y=data$totalseeds, mu=pred, wt=1)
plot(data$totalseeds, res[,1], pch=17, col="grey50", ylim=c(0,100))
points(data$totalseeds,stat_res, pch=17, col="dodgerblue2")
points(data$totalseeds, dev_res, pch=17, col="firebrick")
prediction_quantiles<- function(model, data){
data$total_competition <- data$conspecifics + data$heterospecifics
preds <- data %>% add_predicted_draws(model)  %>% mutate( res =  (totalseeds - .prediction))
preds_2 <- preds %>% mutate(stat_res = res/.prediction)
res    <- add_residual_draws( newdata = data, model=model)
devs <- deviance_residuals(preds$totalseeds, preds$.prediction, wt=1)
preds_2$deviance <- devs
p<- ggplot(preds, aes(y=totalseeds, x=total_competition, shape = as.factor(env))) +
geom_point(col= rethinking::col.alpha("dodgerblue",.7)) +
theme_bw() +
stat_pointinterval(aes(x=total_competition,y=.prediction),  col= rethinking::col.alpha("grey50", alpha = 0.5) )
p2 <- ggplot(preds)+
stat_pointinterval(aes(x=totalseeds, y=.prediction), col="dodgerblue2") +
theme_bw() +
ylim(0,40) +
geom_abline(slope = 1, intercept = 0, col= "grey50")
p3 <-  ggplot(preds_2) +  stat_pointinterval(aes(x=totalseeds, y= stat_res), col="dodgerblue2") +
theme_bw() + ylim(-10,30) +
# stat_pointinterval(aes(x=totalseeds, y= .residual), col="grey50", data = res) +
stat_pointinterval(aes(x=totalseeds, y= deviance), col="firebrick")
#print(p)
#print(p2)
print(p3)
}
prediction_quantiles(BEV_vero, vero_focal)
predictions_data  <- data %>% add_predicted_draws(model)
residuals_data    <- add_residual_draws( newdata = data, model=model)
deviance_data      <- deviance_residuals(preds$totalseeds, preds$.prediction, wt=1)
predictions_data   <- data %>% add_predicted_draws(model)
residuals_data     <- add_residual_draws( newdata = data, model=model)
deviance_data      <- deviance_residuals( y=predictions_data$totalseeds, mu=predictions_data$.prediction, wt=1)
all_residuals  <- data.frame("predictions"= predictions_data$.prediction, "residuals"= residuals_data$.residual,
"deviance_residuals" = deviance_data)
head(all_residuals)
all_residuals  <- data.frame("obseved_seeds"=predictions_data$totalseeds,"predictions"= predictions_data$.prediction, "residuals"= residuals_data$.residual,
"deviance_residuals" = deviance_data)
head(all_residuals)
predictions_data   <- data %>% add_predicted_draws(model)  %>% mutate( residuals = totalseeds - .prediction)
predictions_data   <- data %>% add_predicted_draws(model)  %>% mutate( residuals = totalseeds - .prediction)
deviance_data      <- deviance_residuals( y=predictions_data$totalseeds, mu=predictions_data$.prediction, wt=1)
all_residuals  <- data.frame("obseved_seeds"=predictions_data$totalseeds,"predictions"= predictions_data$.prediction, "residuals"= predictions_data$residuals,
"deviance_residuals" = deviance_data)
head(all_residuals)
predictions_data   <- data %>% add_predicted_draws(model)  %>% mutate( residuals = totalseeds - .prediction) %>% mutate( stand_residuals = residuals/.prediction)
deviance_data      <- deviance_residuals( y=predictions_data$totalseeds, mu=predictions_data$.prediction, wt=1)
all_residuals  <- data.frame("obseved_seeds"=predictions_data$totalseeds,"predictions"= predictions_data$.prediction, "residuals"= predictions_data$residuals,
"deviance_residuals" = deviance_data, "stan_res" = predictions_data$stand_residuals)
all_residuals
head(all_residuals)
deviance_residuals(y=6, mu=9, wt=1)
-3/9
prediction_quantiles<- function(model, data){
data$total_competition <- data$conspecifics + data$heterospecifics
predictions_data   <- data %>% add_predicted_draws(model)  %>% mutate( residuals = totalseeds - .prediction) %>% mutate( stand_residuals = residuals/.prediction)
deviance_data      <- deviance_residuals( y=predictions_data$totalseeds, mu=predictions_data$.prediction, wt=1)
all_residuals  <- data.frame("obseved_seeds"=predictions_data$totalseeds,"predictions"= predictions_data$.prediction, "residuals"= predictions_data$residuals,
"deviance_residuals" = deviance_data, "stan_res" = predictions_data$stand_residuals)
# p<- ggplot(preds, aes(y=totalseeds, x=total_competition, shape = as.factor(env))) +
#   geom_point(col= rethinking::col.alpha("dodgerblue",.7)) +
#   theme_bw() +
#   stat_pointinterval(aes(x=total_competition,y=.prediction),  col= rethinking::col.alpha("grey50", alpha = 0.5) )
#
# p2 <- ggplot(preds)+
#   stat_pointinterval(aes(x=totalseeds, y=.prediction), col="dodgerblue2") +
#   theme_bw() +
#   ylim(0,40) +
#   geom_abline(slope = 1, intercept = 0, col= "grey50")
p3 <-  ggplot(all_residuals) +
stat_pointinterval(aes(x=totalseeds, y= residuals), col="grey50")
stat_pointinterval(aes(x=totalseeds, y= stan_res), col="dodgerblue2") +
stat_pointinterval(aes(x=totalseeds, y= deviance_residuals), col="firebrick")+
theme_bw() +
ylim(-10,30)
#print(p)
#print(p2)
print(p3)
}
prediction_quantiles(BEV_vero, data= vero_focal)
prediction_quantiles(BEV_vero, data= vero_focal)
prediction_quantiles<- function(model, data){
data$total_competition <- data$conspecifics + data$heterospecifics
predictions_data   <- data %>% add_predicted_draws(model)  %>% mutate( residuals = totalseeds - .prediction) %>% mutate( stand_residuals = residuals/.prediction)
deviance_data      <- deviance_residuals( y=predictions_data$totalseeds, mu=predictions_data$.prediction, wt=1)
all_residuals  <- data.frame("obseved_seeds"=predictions_data$totalseeds,"predictions"= predictions_data$.prediction, "residuals"= predictions_data$residuals,
"deviance_residuals" = deviance_data, "stan_res" = predictions_data$stand_residuals)
# p<- ggplot(preds, aes(y=totalseeds, x=total_competition, shape = as.factor(env))) +
#   geom_point(col= rethinking::col.alpha("dodgerblue",.7)) +
#   theme_bw() +
#   stat_pointinterval(aes(x=total_competition,y=.prediction),  col= rethinking::col.alpha("grey50", alpha = 0.5) )
#
# p2 <- ggplot(preds)+
#   stat_pointinterval(aes(x=totalseeds, y=.prediction), col="dodgerblue2") +
#   theme_bw() +
#   ylim(0,40) +
#   geom_abline(slope = 1, intercept = 0, col= "grey50")
p3 <-  ggplot(all_residuals) +
stat_pointinterval(aes(x=totalseeds, y= residuals), col="grey50")
stat_pointinterval(aes(x=totalseeds, y= stan_res), col="dodgerblue2")
# stat_pointinterval(aes(x=totalseeds, y= deviance_residuals), col="firebrick")+
# theme_bw() +
# ylim(-10,30)
#print(p)
#print(p2)
print(p3)
}
prediction_quantiles(BEV_vero, data= vero_focal)
prediction_quantiles<- function(model, data){
data$total_competition <- data$conspecifics + data$heterospecifics
predictions_data   <- data %>% add_predicted_draws(model)  %>% mutate( residuals = totalseeds - .prediction) %>% mutate( stand_residuals = residuals/.prediction)
deviance_data      <- deviance_residuals( y=predictions_data$totalseeds, mu=predictions_data$.prediction, wt=1)
all_residuals  <- data.frame("obseved_seeds"=predictions_data$totalseeds,"predictions"= predictions_data$.prediction, "residuals"= predictions_data$residuals,
"deviance_residuals" = deviance_data, "stan_res" = predictions_data$stand_residuals)
# p<- ggplot(preds, aes(y=totalseeds, x=total_competition, shape = as.factor(env))) +
#   geom_point(col= rethinking::col.alpha("dodgerblue",.7)) +
#   theme_bw() +
#   stat_pointinterval(aes(x=total_competition,y=.prediction),  col= rethinking::col.alpha("grey50", alpha = 0.5) )
#
# p2 <- ggplot(preds)+
#   stat_pointinterval(aes(x=totalseeds, y=.prediction), col="dodgerblue2") +
#   theme_bw() +
#   ylim(0,40) +
#   geom_abline(slope = 1, intercept = 0, col= "grey50")
#
# p3 <-  ggplot(all_residuals) +
#     stat_pointinterval(aes(x=totalseeds, y= residuals), col="grey50")
#     stat_pointinterval(aes(x=totalseeds, y= stan_res), col="dodgerblue2")
#     # stat_pointinterval(aes(x=totalseeds, y= deviance_residuals), col="firebrick")+
# theme_bw() +
# ylim(-10,30)
#print(p)
# #print(p2)
# print(p3)
return(all_residuals)
}
prediction_quantiles(BEV_vero, data= vero_focal)
aa<-prediction_quantiles(BEV_vero, data= vero_focal)
head(aa)
class(aa)
ggplot(aa)
prediction_quantiles<- function(model, data){
data$total_competition <- data$conspecifics + data$heterospecifics
predictions_data   <- data %>% add_predicted_draws(model)  %>% mutate( residuals = totalseeds - .prediction) %>% mutate( stand_residuals = residuals/.prediction)
deviance_data      <- deviance_residuals( y=predictions_data$totalseeds, mu=predictions_data$.prediction, wt=1)
all_residuals  <- data.frame("totalseeds"=predictions_data$totalseeds,"predictions"= predictions_data$.prediction, "residuals"= predictions_data$residuals,
"deviance_residuals" = deviance_data, "stan_res" = predictions_data$stand_residuals)
# p<- ggplot(preds, aes(y=totalseeds, x=total_competition, shape = as.factor(env))) +
#   geom_point(col= rethinking::col.alpha("dodgerblue",.7)) +
#   theme_bw() +
#   stat_pointinterval(aes(x=total_competition,y=.prediction),  col= rethinking::col.alpha("grey50", alpha = 0.5) )
#
# p2 <- ggplot(preds)+
#   stat_pointinterval(aes(x=totalseeds, y=.prediction), col="dodgerblue2") +
#   theme_bw() +
#   ylim(0,40) +
#   geom_abline(slope = 1, intercept = 0, col= "grey50")
#
p3 <-  ggplot(all_residuals) +
stat_pointinterval(aes(x=totalseeds, y= residuals), col="grey50")
#     stat_pointinterval(aes(x=totalseeds, y= stan_res), col="dodgerblue2")
#     # stat_pointinterval(aes(x=totalseeds, y= deviance_residuals), col="firebrick")+
# theme_bw() +
# ylim(-10,30)
#print(p)
# #print(p2)
# print(p3)
return(all_residuals)
}
prediction_quantiles(BEV_vero, vero_focal)
prediction_quantiles<- function(model, data){
data$total_competition <- data$conspecifics + data$heterospecifics
predictions_data   <- data %>% add_predicted_draws(model)  %>% mutate( residuals = totalseeds - .prediction) %>% mutate( stand_residuals = residuals/.prediction)
deviance_data      <- deviance_residuals( y=predictions_data$totalseeds, mu=predictions_data$.prediction, wt=1)
all_residuals  <- data.frame("totalseeds"=predictions_data$totalseeds,"predictions"= predictions_data$.prediction, "residuals"= predictions_data$residuals,
"deviance_residuals" = deviance_data, "stan_res" = predictions_data$stand_residuals)
# p<- ggplot(preds, aes(y=totalseeds, x=total_competition, shape = as.factor(env))) +
#   geom_point(col= rethinking::col.alpha("dodgerblue",.7)) +
#   theme_bw() +
#   stat_pointinterval(aes(x=total_competition,y=.prediction),  col= rethinking::col.alpha("grey50", alpha = 0.5) )
#
# p2 <- ggplot(preds)+
#   stat_pointinterval(aes(x=totalseeds, y=.prediction), col="dodgerblue2") +
#   theme_bw() +
#   ylim(0,40) +
#   geom_abline(slope = 1, intercept = 0, col= "grey50")
#
p3 <-  ggplot(all_residuals) +
stat_pointinterval(aes(x=totalseeds, y= residuals), col="grey50")
#     stat_pointinterval(aes(x=totalseeds, y= stan_res), col="dodgerblue2")
#     # stat_pointinterval(aes(x=totalseeds, y= deviance_residuals), col="firebrick")+
# theme_bw() +
# ylim(-10,30)
#print(p)
# #print(p2)
print(p3)
}
prediction_quantiles(BEV_vero, vero_focal)
prediction_quantiles<- function(model, data){
data$total_competition <- data$conspecifics + data$heterospecifics
predictions_data   <- data %>% add_predicted_draws(model)  %>% mutate( residuals = totalseeds - .prediction) %>% mutate( stand_residuals = residuals/.prediction)
deviance_data      <- deviance_residuals( y=predictions_data$totalseeds, mu=predictions_data$.prediction, wt=1)
all_residuals  <- data.frame("totalseeds"=predictions_data$totalseeds,"predictions"= predictions_data$.prediction, "residuals"= predictions_data$residuals,
"deviance_residuals" = deviance_data, "stan_res" = predictions_data$stand_residuals)
# p<- ggplot(preds, aes(y=totalseeds, x=total_competition, shape = as.factor(env))) +
#   geom_point(col= rethinking::col.alpha("dodgerblue",.7)) +
#   theme_bw() +
#   stat_pointinterval(aes(x=total_competition,y=.prediction),  col= rethinking::col.alpha("grey50", alpha = 0.5) )
#
# p2 <- ggplot(preds)+
#   stat_pointinterval(aes(x=totalseeds, y=.prediction), col="dodgerblue2") +
#   theme_bw() +
#   ylim(0,40) +
#   geom_abline(slope = 1, intercept = 0, col= "grey50")
#
p3 <-  ggplot(all_residuals) +
stat_pointinterval(aes(x=totalseeds, y= residuals), col="grey50") +
stat_pointinterval(aes(x=totalseeds, y= stan_res), col="dodgerblue2")
#     # stat_pointinterval(aes(x=totalseeds, y= deviance_residuals), col="firebrick")+
# theme_bw() +
# ylim(-10,30)
#print(p)
# #print(p2)
print(p3)
}
prediction_quantiles(BEV_vero, vero_focal)
prediction_quantiles<- function(model, data){
data$total_competition <- data$conspecifics + data$heterospecifics
predictions_data   <- data %>% add_predicted_draws(model)  %>% mutate( residuals = totalseeds - .prediction) %>% mutate( stand_residuals = residuals/.prediction)
deviance_data      <- deviance_residuals( y=predictions_data$totalseeds, mu=predictions_data$.prediction, wt=1)
all_residuals  <- data.frame("totalseeds"=predictions_data$totalseeds,"predictions"= predictions_data$.prediction, "residuals"= predictions_data$residuals,
"deviance_residuals" = deviance_data, "stan_res" = predictions_data$stand_residuals)
# p<- ggplot(preds, aes(y=totalseeds, x=total_competition, shape = as.factor(env))) +
#   geom_point(col= rethinking::col.alpha("dodgerblue",.7)) +
#   theme_bw() +
#   stat_pointinterval(aes(x=total_competition,y=.prediction),  col= rethinking::col.alpha("grey50", alpha = 0.5) )
#
# p2 <- ggplot(preds)+
#   stat_pointinterval(aes(x=totalseeds, y=.prediction), col="dodgerblue2") +
#   theme_bw() +
#   ylim(0,40) +
#   geom_abline(slope = 1, intercept = 0, col= "grey50")
#
p3 <-  ggplot(all_residuals) +
stat_pointinterval(aes(x=totalseeds, y= residuals), col="grey50") +
stat_pointinterval(aes(x=totalseeds, y= stan_res), col="dodgerblue2") +
stat_pointinterval(aes(x=totalseeds, y= deviance_residuals), col="firebrick")
# theme_bw() +
# ylim(-10,30)
#print(p)
# #print(p2)
print(p3)
}
prediction_quantiles(BEV_vero, vero_focal)
prediction_quantiles<- function(model, data){
data$total_competition <- data$conspecifics + data$heterospecifics
predictions_data   <- data %>% add_predicted_draws(model)  %>% mutate( residuals = totalseeds - .prediction) %>% mutate( stand_residuals = residuals/.prediction)
deviance_data      <- deviance_residuals( y=predictions_data$totalseeds, mu=predictions_data$.prediction, wt=1)
all_residuals  <- data.frame("totalseeds"=predictions_data$totalseeds,"predictions"= predictions_data$.prediction, "residuals"= predictions_data$residuals,
"deviance_residuals" = deviance_data, "stan_res" = predictions_data$stand_residuals)
# p<- ggplot(preds, aes(y=totalseeds, x=total_competition, shape = as.factor(env))) +
#   geom_point(col= rethinking::col.alpha("dodgerblue",.7)) +
#   theme_bw() +
#   stat_pointinterval(aes(x=total_competition,y=.prediction),  col= rethinking::col.alpha("grey50", alpha = 0.5) )
#
# p2 <- ggplot(preds)+
#   stat_pointinterval(aes(x=totalseeds, y=.prediction), col="dodgerblue2") +
#   theme_bw() +
#   ylim(0,40) +
#   geom_abline(slope = 1, intercept = 0, col= "grey50")
#
p3 <-  ggplot(all_residuals) +
stat_pointinterval(aes(x=totalseeds, y= residuals), col="grey50") +
stat_pointinterval(aes(x=totalseeds, y= stan_res), col="dodgerblue2") +
stat_pointinterval(aes(x=totalseeds, y= deviance_residuals), col="firebrick")
theme_bw() +
ylim(-10,30)
#print(p)
# #print(p2)
print(p3)
}
prediction_quantiles(BEV_vero, vero_focal)
prediction_quantiles<- function(model, data){
data$total_competition <- data$conspecifics + data$heterospecifics
predictions_data   <- data %>% add_predicted_draws(model)  %>% mutate( residuals = totalseeds - .prediction) %>% mutate( stand_residuals = residuals/.prediction)
deviance_data      <- deviance_residuals( y=predictions_data$totalseeds, mu=predictions_data$.prediction, wt=1)
all_residuals  <- data.frame("totalseeds"=predictions_data$totalseeds,"predictions"= predictions_data$.prediction, "residuals"= predictions_data$residuals,
"deviance_residuals" = deviance_data, "stan_res" = predictions_data$stand_residuals)
# p<- ggplot(preds, aes(y=totalseeds, x=total_competition, shape = as.factor(env))) +
#   geom_point(col= rethinking::col.alpha("dodgerblue",.7)) +
#   theme_bw() +
#   stat_pointinterval(aes(x=total_competition,y=.prediction),  col= rethinking::col.alpha("grey50", alpha = 0.5) )
#
# p2 <- ggplot(preds)+
#   stat_pointinterval(aes(x=totalseeds, y=.prediction), col="dodgerblue2") +
#   theme_bw() +
#   ylim(0,40) +
#   geom_abline(slope = 1, intercept = 0, col= "grey50")
#
p3 <-  ggplot(all_residuals) +
stat_pointinterval(aes(x=totalseeds, y= residuals), col="grey50") +
stat_pointinterval(aes(x=totalseeds, y= stan_res), col="dodgerblue2") +
stat_pointinterval(aes(x=totalseeds, y= deviance_residuals), col="firebrick") +
theme_bw() +
ylim(-10,30)
#print(p)
# #print(p2)
print(p3)
}
prediction_quantiles(BEV_vero, vero_focal)
poisson()$dev.resid\
poisson()$dev.resid
#we add predictive draws from the posterior distribution and calculate residuals and  stand_residuals
predictions_data   <- data %>% add_predicted_draws(model)  %>% mutate( residuals = totalseeds - .prediction) %>% mutate( stand_residuals = residuals/.prediction)
#deviance uses the totalseeds (observed), the predictions generated by the predictive_draws (.prediction) and a wt=1
deviance_data      <- deviance_residuals( y=predictions_data$totalseeds, mu=predictions_data$.prediction, wt=1)
#we add it all together
all_residuals  <- data.frame("totalseeds"=predictions_data$totalseeds,"predictions"= predictions_data$.prediction, "residuals"= predictions_data$residuals,
"deviance_residuals" = deviance_data, "stan_res" = predictions_data$stand_residuals)
predictions_data$totalseeds
predictions_data$.prediction
source("code/models/set_priors.R")
source("code/clean_data.R")
BEV_vero <- readRDS("~/bayesian-competition/BEV_vero.RDS")
brms::predict.brmsfit(BEV_vero)
update.packages(brms)
update.packages("brms")
