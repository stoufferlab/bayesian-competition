neighbors = 200  )
trcy_loss <- multiple_loss(models = trcy_models,
model_names = model_names,
loss_fucntions = loss_functions,
neighbors = 200  )
#we need to tell it the order of stuff, always as the model names
trcy_loss$model<-factor(trcy_loss$model, levels = model_names)
vero_loss$model<-factor(vero_loss$model, levels= model_names)
#trcy_loss <- trcy_loss %>% melt( id.vars = c("N", "model"), value.name = "response")
vero_0 <- ggplot(data=vero_loss, aes(x=N, y=conspecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = TRUE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(0,.1)
vero_0
vero_1 <- ggplot(data=vero_loss, aes(x=N, y=heterospecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(0,0.1)
vero_1
vero_1 <- ggplot(data=vero_loss, aes(x=N, y=heterospecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(-.5,0.5)
vero_1
vero_1 <- ggplot(data=vero_loss, aes(x=N, y=heterospecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(-.05,0.05)
vero_1
trcy_1 <- ggplot(data=trcy_loss, aes(x=N, y=heterospecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = TRUE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(0,0.1)
trcy_0 <- ggplot(data=trcy_loss, aes(x=N, y=conspecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(0,0.1)
trcy_1
trcy_0
all_figures<-ggarrange( vero_0, vero_1, trcy_0, trcy_1 ,
labels = c("A", "B", "C","D"),
ncol = 2, nrow = 2)
pdf(file = "results/loss.pdf", width = 8, height = 8.5/1.6)
annotate_figure(all_figures,
bottom = text_grob("Neighbor density ",
size = 14),
left = text_grob("Per capita loss",  rot = 90, size = 14),
top = text_grob("Conspecifics                             Heterospecifics", size = 12)
)
dev.off()
vero_0 <- ggplot(data=vero_loss, aes(x=N, y=conspecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(0,.1)
vero_1 <- ggplot(data=vero_loss, aes(x=N, y=heterospecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = TRUE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(-.05,0.05)
trcy_1 <- ggplot(data=trcy_loss, aes(x=N, y=heterospecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(0,0.1)
trcy_0 <- ggplot(data=trcy_loss, aes(x=N, y=conspecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(0,0.1)
all_figures<-ggarrange( vero_0, vero_1, trcy_0, trcy_1 ,
labels = c("A", "B", "C","D"),
ncol = 2, nrow = 2)
pdf(file = "results/loss.pdf", width = 8, height = 8.5/1.6)
annotate_figure(all_figures,
bottom = text_grob("Neighbor density ",
size = 14),
left = text_grob("Per capita loss",  rot = 90, size = 14),
top = text_grob("Conspecifics                             Heterospecifics", size = 12)
)
dev.off()
#trcy_loss <- trcy_loss %>% melt( id.vars = c("N", "model"), value.name = "response")
vero_0 <- ggplot(data=vero_loss, aes(x=N, y=conspecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(0,.1)
vero_1 <- ggplot(data=vero_loss, aes(x=N, y=heterospecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = TRUE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(-.05,0.05)
trcy_1 <- ggplot(data=trcy_loss, aes(x=N, y=heterospecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(0,0.1)
trcy_0 <- ggplot(data=trcy_loss, aes(x=N, y=conspecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(0,0.1)
all_figures<-ggarrange( vero_0, vero_1, trcy_0, trcy_1 ,
labels = c("A", "B", "C","D"),
ncol = 2, nrow = 2)
pdf(file = "results/loss.pdf", width = 8, height = 8.5/1.6)
annotate_figure(all_figures,
bottom = text_grob("Neighbor density ",
size = 14),
left = text_grob("Per capita loss",  rot = 90, size = 14),
top = text_grob("Conspecifics                             Heterospecifics", size = 12)
)
dev.off()
vero_0 <- ggplot(data=vero_loss, aes(x=N, y=conspecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(0,.1)
vero_1 <- ggplot(data=vero_loss, aes(x=N, y=heterospecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = TRUE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(-.01,0.05)
trcy_1 <- ggplot(data=trcy_loss, aes(x=N, y=heterospecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = TRUE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(0,0.1)
trcy_0 <- ggplot(data=trcy_loss, aes(x=N, y=conspecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(0,0.1)
all_figures<-ggarrange( vero_0, vero_1, trcy_0, trcy_1 ,
labels = c("A", "B", "C","D"),
ncol = 2, nrow = 2)
pdf(file = "results/loss.pdf", width = 8, height = 8.5/1.6)
annotate_figure(all_figures,
bottom = text_grob("Neighbor density ",
size = 14),
left = text_grob("Per capita loss",  rot = 90, size = 14),
top = text_grob("Conspecifics                             Heterospecifics", size = 12)
)
dev.off()
vero_0 <- ggplot(data=vero_loss, aes(x=N, y=conspecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(0,.1)
vero_1 <- ggplot(data=vero_loss, aes(x=N, y=heterospecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(-.01,0.05)
trcy_1 <- ggplot(data=trcy_loss, aes(x=N, y=heterospecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = TRUE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(0,0.1)
trcy_0 <- ggplot(data=trcy_loss, aes(x=N, y=conspecific_response)) +
geom_line(aes(linetype = model, color= model), size=.7, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_color_manual(values=palette_alba) +
theme_alba +
ylim(0,0.1)
all_figures<-ggarrange( vero_0, vero_1, trcy_0, trcy_1 ,
labels = c("A", "B", "C","D"),
ncol = 2, nrow = 2)
pdf(file = "results/loss.pdf", width = 8, height = 8.5/1.6)
annotate_figure(all_figures,
bottom = text_grob("Neighbor density ",
size = 14),
left = text_grob("Per capita loss",  rot = 90, size = 14),
top = text_grob("Conspecifics                             Heterospecifics", size = 12)
)
dev.off()
library(brms)
library(ggplot2)
library(ggpubr)
#We source everything known to human kind...
source("code/growth_rates.R")
source("code/gg_theme.R")
source("code/read_models.R")
source("code/model_toolbox.R")
#survival and germination for Vero (i) and Trcy(j)
gi<-.372
si<-.556
gj<-.258
sj<-.033
#A function that returns a data frame with posterior equilibrium values ofr each models
#modesl is a list of models of the same species
#names is the names of each model, IN THE SAME ORDER as in the list models
#growth functions are the growth functions of each model, in the same order as in the list models
#s and g are the respective survival and germination of each species
multiple_equilibriums <-
function(models,
model_names,
growth_fucntions,
s,
g) {
all_posteriors <- data.frame()
for (i in 1:length(models)) {
if (model_names[i] == "Hassell") {
exp_param = TRUE
} else{
exp_param = FALSE
}
posterior <-
posterior_parameters(
model = models[[i]],
growth_fun = growth_fucntions[[i]],
s = si,
g = gi,
exp_param = exp_param
)
posterior$model <- model_names[i]
all_posteriors <- rbind(all_posteriors, posterior)
}
return(all_posteriors)
}
#order is important in this function, each model has its own growth function and equilibrium function, and name
#This is the order : beverton holt (bh), lotka volterra (lv), ricker (rc) and hassell (hs)
model_names <- c("Beverton-Holt", "Lotka-Volterra", "Ricker", "Hassell")
growth_functions <- list(bh_growth, lv_growth, rc_growth, hs_growth)
vero_models <-list(vero_bh_pairs_zippoisson.rds,
vero_lv_pairs_zippoisson.rds,
vero_rc_pairs_zippoisson.rds,
vero_hs_pairs_zippoisson.rds)
trcy_models<-list(trcy_bh_pairs_zippoisson.rds,
trcy_lv_pairs_zippoisson.rds,
trcy_rc_pairs_zippoisson.rds,
trcy_hs_pairs_zippoisson.rds)
vero <- multiple_equilibriums(
models = vero_models,
model_names = model_names,
growth_fucntions = growth_functions,
s = si,
g = gi
)
trcy <- multiple_equilibriums(
models = trcy_models,
model_names = model_names,
growth_fucntions = growth_functions,
s = sj,
g = gj
)
trcy$model<-factor(trcy$model, levels = model_names)
vero$model<-factor(vero$model, levels= model_names)
xx<-700
yy<-0.02
vero_0<-ggplot(vero) +
geom_density(mapping = aes(x = equilibrium, fill = model, linetype=model) ,
alpha = 0.8, show.legend = FALSE) +
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_fill_manual(values=palette_alba)+
theme_alba+
coord_cartesian(xlim = c(0,xx))
#
# vero_1<-ggplot(vero) +
#   geom_density(mapping = aes(x = env_equilibrium, fill = model, linetype=model) ,
#                alpha = 0.8,show.legend = TRUE) +
#   scale_fill_brewer(palette="YlGn")+
#   xlim(0,1500)+
#  theme_alba
trcy_0<-ggplot(trcy) +
geom_density(mapping = aes(x = equilibrium, fill = model, linetype=model) ,
alpha = 0.8, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_fill_manual(values=palette_alba)+
theme_alba+
coord_cartesian(xlim = c(0,xx))
vero_0
trcy_0
trcy_0<-ggplot(trcy) +
geom_density(mapping = aes(x = equilibrium, fill = model, linetype=model) ,
alpha = 0.8, show.legend = TRUE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_fill_manual(values=palette_alba)+
theme_alba+
coord_cartesian(xlim = c(0,xx))
#
# trcy_1<-ggplot(trcy) +
#   geom_density(mapping = aes(x = env_equilibrium, fill = model, linetype=model) ,
#                alpha = 0.8, show.legend = FALSE) +
#   scale_fill_brewer(palette=
all_figures<-ggarrange( vero_0, trcy_0,
labels = c("A", "B"),
ncol = 1, nrow = 2)
all_figures
vero_0<-ggplot(vero) +
geom_density(mapping = aes(x = equilibrium, fill = model, linetype=model) ,
alpha = 0.8, show.legend = TRUE) +
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_fill_manual(values=palette_alba)+
theme_alba+
coord_cartesian(xlim = c(0,xx))
#
# vero_1<-ggplot(vero) +
#   geom_density(mapping = aes(x = env_equilibrium, fill = model, linetype=model) ,
#                alpha = 0.8,show.legend = TRUE) +
#   scale_fill_brewer(palette="YlGn")+
#   xlim(0,1500)+
#  theme_alba
trcy_0<-ggplot(trcy) +
geom_density(mapping = aes(x = equilibrium, fill = model, linetype=model) ,
alpha = 0.8, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_fill_manual(values=palette_alba)+
theme_alba+
coord_cartesian(xlim = c(0,xx))
#
# trcy_1<-ggplot(trcy) +
#   geom_density(mapping = aes(x = env_equilibrium, fill = model, linetype=model) ,
#                alpha = 0.8, show.legend = FALSE) +
#   scale_fill_brewer(palette="YlGn")+
#   theme_alba +
#   xlim(0,3000)
all_figures<-ggarrange( vero_0, trcy_0,
labels = c("A", "B"),
ncol = 1, nrow = 2)
pdf(file = "results/equilibrium.pdf", width = 8, height = 8.5/1.6)
annotate_figure(all_figures,
bottom = text_grob("Monoculture equilibrium ",
size = 14),
left = text_grob("Density",  rot = 90, size = 14),
)
all_figures
dev.off()
trcy_0<-ggplot(trcy) +
geom_density(mapping = aes(x = equilibrium, fill = model, linetype=model) ,
alpha = 0.8, show.legend = FALSE)+
scale_linetype_manual(values=c("solid","dashed","twodash", "dotted"))+
scale_fill_manual(values=palette_alba)+
theme_alba+
coord_cartesian(xlim = c(0,xx))
#
# trcy_1<-ggplot(trcy) +
#   geom_density(mapping = aes(x = env_equilibrium, fill = model, linetype=model) ,
#                alpha = 0.8, show.legend = FALSE) +
#   scale_fill_brewer(palette="YlGn")+
#   theme_alba +
#   xlim(0,3000)
all_figures<-ggarrange( vero_0, trcy_0,
labels = c("A", "B"),
ncol = 1, nrow = 2)
pdf(file = "results/equilibrium.pdf", width = 8, height = 8.5/1.6)
annotate_figure(all_figures,
bottom = text_grob("Monoculture equilibrium ",
size = 14),
left = text_grob("Density",  rot = 90, size = 14),
)
dev.off()
all_figures<-ggarrange( vero_0, trcy_0,
labels = c("A", "B"),
ncol = 1, nrow = 2)
pdf(file = "results/equilibrium.pdf", width = 5, height = 5/1.6)
annotate_figure(all_figures,
bottom = text_grob("Monoculture equilibrium ",
size = 14),
left = text_grob("Density",  rot = 90, size = 14),
)
dev.off()
pdf(file = "results/equilibrium.pdf", width = 6, height = 6.5/1.6)
annotate_figure(all_figures,
bottom = text_grob("Monoculture equilibrium ",
size = 14),
left = text_grob("Density",  rot = 90, size = 14),
)
dev.off()
all_figures<-ggarrange( vero_0, trcy_0,
labels = c("A", "B"),
ncol = 1, nrow = 2)
pdf(file = "results/equilibrium.pdf", width = 5.5, height = 6.5/1.6)
annotate_figure(all_figures,
bottom = text_grob("Monoculture equilibrium ",
size = 14),
left = text_grob("Density",  rot = 90, size = 14),
)
dev.off()
library(brms)
source("code/clean_data.R")
source("code/models/set_priors.R")
source("code/models/model_formulas_pairs.R")
source("code/models/automate_fit.R")
vero_hs_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_hs_pairs_poisson.rds")
vero_hs_pairs_poisson
vero_bh_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_bh_pairs_poisson.rds")
vero_bh_pairs_poisson
vero_lv_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_lv_pairs_poisson.rds")
vero_lv_pairs_poisson
plot(vero_lv_pairs_poisson)
vero_rc_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_rc_pairs_poisson.rds")
vero_rc_pairs_poisson
plot(vero_rc_pairs_poisson)
vero_bh_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_bh_pairs_poisson.rds")
vero_bh_pairs_poisson
vero_hs_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/vero_hs_pairs_poisson.rds")
vero_hs_pairs_poisson
trcy_bh_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/trcy_bh_pairs_poisson.rds")
trcy_bh_pairs_poisson
plot(trcy_bh_pairs_poisson)
trcy_lv_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/trcy_lv_pairs_poisson.rds")
trcy_lv_pairs_poisson
trcy_rc_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/trcy_rc_pairs_poisson.rds")
trcy_rc_pairs_poisson
trcy_bh_pairs_poisson <- readRDS("~/bayesian-competition/model_objects/trcy_bh_pairs_poisson.rds")
trcy_bh_pairs_poisson
library(brms)
source("code/clean_data.R")
source("code/models/set_priors.R")
source("code/models/model_formulas_pairs.R")
source("code/models/automate_fit.R")
library(brms)
source("code/clean_data.R")
source("code/models/set_priors.R")
source("code/models/model_formulas_pairs.R")
source("code/models/automate_fit.R")
hassell
prior_exp_pairs
model <- brm(
formula = hassell,
prior = prior_exp_pairs
data =  vero_focal,
family = poisson(link="identity"),
iter = 4000,
warmup = 2000,
cores   = 4,
chains  = 2,
inits   = 1,
control = list(adapt_delta = .99)
)
model <- brm(
formula = hassell,
prior = prior_exp_pairs
data =  vero_focal,
family = poisson(link="identity"),
iter = 4000,
warmup = 2000,
cores   = 4,
chains  = 2,
inits   = 1,
control = list(adapt_delta = .99)
)
model <- brm(
formula = hassell,
prior = prior_exp_pairs,
data =  vero_focal,
family = poisson(link="identity"),
iter = 4000,
warmup = 2000,
cores   = 4,
chains  = 2,
inits   = 1,
control = list(adapt_delta = .99)
)
model <- brm(
formula = hassell,
prior = prior_exp_pairs,
data =  vero_focal,
family = poisson(link="identity"),
iter = 4000,
warmup = 2000,
cores   = 4,
chains  = 2,
inits   = 1,
control = list(adapt_delta = .99)
)
hassell
library(brms)
source("code/clean_data.R")
source("code/models/set_priors.R")
source("code/models/model_formulas_pairs.R")
source("code/models/automate_fit.R")
### We create lists of formulas on which to iterat
formulas_pairs <- list(hs = hassell)
model_fits(
focal = "vero",
data = vero_focal,
distribution = poisson(link = "identity"),
formulas = formulas_pairs,
priors = prior_pairs,
priors_exponent = prior_exp_pairs,
num_species = "pairs",
last_name = "poisson"
)
