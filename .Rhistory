drop = FALSE,
values = c(col1,col2,col3),
name = "Median prediction",
labels = c("Coexistence",
expression(italic("T. cyanopetala")),
expression(italic(
"V. rosea"
)))
)
woody <- annotate_figure(woody,
top = text_grob( "Vellia rosea", size = 12, face = "italic"),
right = text_grob( "Trachymene cyanopetala", size = 12, face = "italic", rot=-90)
)
woody
library(ggplot2)
library(ggpubr)
# figures for the paper ---------------------------------------------------
source("code/access_results.R")
sunny_results <- filter(final_results, environment=="open") %>% filter( vero_model != "Lotka-Volterra")%>% filter( trcy_model != "Lotka-Volterra" )
woody_results <- filter(final_results, environment=="woody")  %>% filter( vero_model != "Lotka-Volterra")%>% filter( trcy_model != "Lotka-Volterra" )
write_csv(sunny_results, file = "sunny.csv")
write_csv(woody_results, file = "woody.csv")
col1 <- rethinking::col.alpha("mediumseagreen",1)
col2 <- rethinking::col.alpha("#0e77be",1)
col3<- rethinking::col.alpha("#f0bb3f",1)
col4 <- rethinking::col.alpha("mediumseagreen",.7)
col5 <- rethinking::col.alpha("#0e77be",.7)
col6<- rethinking::col.alpha("#f0bb3f",.7)
xx <- expression("Relative coexistence ratio,"~rho)
yy <- expression("Distance from the edge,"~delta)
new_order <- c("both", "trcy", "vero")
sunny_results$outcome_mean <- factor(sunny_results$outcome_mean, levels = new_order)
woody_results$outcome_mean <- factor(woody_results$outcome_mean, levels = new_order)
sun1<-ggplot(sunny_results) +
geom_point(
mapping = aes(
x = proportion,
y = distance,
col = as.factor(outcome),
),
shape=19,
show.legend = TRUE,
size = 1
)+
scale_color_manual(
values = c(col4, col5, col6),
name = "Posterior prediction",
labels = c("Coexistence",
expression(italic("T. cyanopetala")),
expression(italic(
"V. rosea"
))
))+
facet_grid(trcy_model ~ vero_model)  +
geom_abline(
intercept = 0,
slope = 0,
linetype = "dashed",
col = "grey50"
) +
xlim(0, 2.5) +
ylim(-20, 10) +
theme_bw() +
theme(
strip.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15),
strip.text = element_text(size = 12),
legend.text.align = 0,
legend.position = "right",
legend.box = "vertical",
legend.margin = margin()
) +
xlab(xx)+
ylab(yy)
open<- sun1 +
geom_point(
mapping = aes(
x = proportion_mean,
y = distance_mean,
fill = as.factor(outcome_mean)
),
col="black",
shape = 24,
stroke=0.5,
size = 3
) +
scale_fill_manual(
values = c(col1,col2,col3),
drop =FALSE,
name = "Median prediction",
labels = c("Coexistence",
expression(italic("T. cyanopetala")),
expression(italic(
"V. rosea"
)))
)
open <- annotate_figure(open,
top = text_grob( "Vellia rosea", size = 12, face = "italic"),
right = text_grob( "Trachymene cyanopetala", size = 12, face = "italic", rot=-90)
)
ggsave(open, filename = "../bayesian_competition_ms/sunny_results.pdf", width = 8, height = 6)
# woody -------------------------------------------------------------------
wod1<-ggplot(woody_results) +
geom_point(
mapping = aes(
x = proportion,
y = distance,
col = as.factor(outcome),
),
shape=19,
show.legend = TRUE,
size = 1
)+
scale_color_manual(
values = c(col4, col5, col6),
name = "Posterior prediction",
labels = c("Coexistence",
expression(italic("T. cyanopetala")),
expression(italic(
"V. rosea"
))
))+
facet_grid(trcy_model ~ vero_model)  +
geom_abline(
intercept = 0,
slope = 0,
linetype = "dashed",
col = "grey50"
) +
xlim(0, 2.5) +
ylim(-20, 10) +
theme_bw() +
theme(
strip.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15),
strip.text = element_text(size = 12),
legend.text.align = 0,
legend.position = "right",
legend.box = "vertical",
legend.margin = margin()
) +
xlab(xx)+
ylab(yy)
woody<- wod1 +
geom_point(
mapping = aes(
x = proportion_mean,
y = distance_mean,
fill = as.factor(outcome_mean)
),
col="black",
shape = 24,
stroke=0.5,
size = 3
) +
scale_fill_manual(
drop = FALSE,
values = c(col1,col2,col3),
name = "Median prediction",
labels = c("Coexistence",
expression(italic("T. cyanopetala")),
expression(italic(
"V. rosea"
)))
)
woody <- annotate_figure(woody,
top = text_grob( "Vellia rosea", size = 12, face = "italic"),
right = text_grob( "Trachymene cyanopetala", size = 12, face = "italic", rot=-90)
)
ggsave(woody, filename = "../bayesian_competition_ms/woody_results.pdf", width = 8, height = 6)
vero_bh_multispecies_poisson <- readRDS("~/bayesian-competition/model_objects/vero_bh_multispecies_poisson.rds")
model <- vero_bh_multispecies_poisson
post        <- posterior_samples(model)
post
lambda      <- exp(post$b_lambda_Intercept)
lambda
lambda_env  <- exp(post$b_lambda_Intercept + post$b_lambda_env)
alphaii     <- post$b_alphaii_Intercept
alphaii_env <- post$b_alphaii_Intercept + post$b_alphaii_env
alphaij     <- post$b_alphaij_Intercept
alphaij_env <- post$b_alphaij_Intercept + post$b_alphaij_env
library(brms)
library(ggplot2)
library(ggpubr)
#We source everything known to human kind...
source("code/gg_theme.R")
source("code/read_models.R")
source("code/model_toolbox.R")
#isaacs mean estimates
gi<- 0.9641188
si<- 0.9654804
gj<- 0.4743974
sj<- 0.9693324
multiple_models <-function(..., s,g) {
models <- list(...)
posteriors <- lapply(models, function(m) {
one_posterior <- posterior_parameters(m,s,g)
return(one_posterior)
})
all_posteriors <- do.call(rbind, posteriors)
}
vero_models <- multiple_equilibriums(
vero_bh_multispecies_poisson.rds,
vero_rc_multispecies_poisson.rds,
s = si,
g = gi
)
multiple_models <-function(..., s,g) {
models <- list(...)
posteriors <- lapply(models, function(m) {
one_posterior <- posterior_parameters(m,s,g)
return(one_posterior)
})
all_posteriors <- do.call(rbind, posteriors)
}
vero_models <- multiple_models(
vero_bh_multispecies_poisson.rds,
vero_rc_multispecies_poisson.rds,
s = si,
g = gi
)
multiple_models()
head(vero_models)
models <- vero_models
models  <- models %>% select(lambda,
lambda_env,
alphaii,
alphaii_env,
alphaij,
alphaij_env,
alphaik,
alphaik_env)
models
head(models)
models <- vero_models
head(models)
?pivot_longer
models  <- models %>% select(lambda,
lambda_env,
alphaii,
alphaii_env,
alphaij,
alphaij_env,
alphaik,
alphaik_env,
model) %>%
pivot_longer(cols = c(lambda,
lambda_env,
alphaii,
alphaii_env,
alphaij,
alphaij_env,
alphaik,
alphaik_env),
names_to= "parameter")
head(models\)
head(models)
tail(models)
ggplot(models,
aes(x=parameter,
y=value,
fill= model)) +
geom_pointrange()
max(models$value)
ggplot(models,
aes(x=parameter,
y=value,
fill= model)) +
geom_pointrange(aes(y_min=0,
y_max = 10))
ggplot(models,
aes(x=parameter,
y=value,
fill= model)) +
geom_pointrange(aes(ymin=0,
ymax = 10))
ggplot(models,
aes(x=parameter,
y=value)) +
geom_pointrange(aes(ymin=0,
ymax = 10)) +
facet_grid(~model)
ggplot(models,
aes(x=parameter,
y=value,
fill= model)) +
geom_violin()
models <- vero_models
models$lambda <- log(models$lambda)
models$lambda_env <- log(models$lambda_env)
models  <- models %>% select(lambda,
lambda_env,
alphaii,
alphaii_env,
alphaij,
alphaij_env,
alphaik,
alphaik_env,
model) %>%
pivot_longer(cols = c(lambda,
lambda_env,
alphaii,
alphaii_env,
alphaij,
alphaij_env,
alphaik,
alphaik_env),
names_to= "parameter")
ggplot(models,
aes(x=parameter,
y=value,
fill= model)) +
geom_violin()
ggplot(models,
aes(x=parameter,
y=value,
fill= model)) +
geom_violin()+
coord_flip()
models <- vero_models
competition  <- models %>% select(
alphaii,
alphaii_env,
alphaij,
alphaij_env,
alphaik,
alphaik_env,
model) %>%
pivot_longer(cols = c(
alphaii,
alphaii_env,
alphaij,
alphaij_env,
alphaik,
alphaik_env),
names_to= "parameter")
ggplot(competition,
aes(x=parameter,
y=value,
fill= model)) +
geom_violin()+
coord_flip()
ggplot(competition,
aes(x=parameter,
y=value,
fill= model)) +
geom_violin()+
coord_flip()+
theme_bw() +
theme(
strip.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15),
strip.text = element_text(size = 12),
legend.text.align = 0,
legend.position = "right",
legend.box = "vertical",
legend.margin = margin()
)
ggplot(competition,
aes(x=parameter,
y=value,
fill= model)) +
geom_density()+
coord_flip()+
theme_bw() +
theme(
strip.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15),
strip.text = element_text(size = 12),
legend.text.align = 0,
legend.position = "right",
legend.box = "vertical",
legend.margin = margin()
)
gplot(competition,
aes(x=parameter,
y=value,
fill= model)) +
geom_density()
ggplot(competition,
aes(x=parameter,
y=value,
fill= model)) +
geom_density()
ggplot(competition,
aes(x=parameter,
y=value,
fill= model)) +
geom_density_ridges()+
coord_flip()+
theme_bw() +
theme(
strip.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15),
strip.text = element_text(size = 12),
legend.text.align = 0,
legend.position = "right",
legend.box = "vertical",
legend.margin = margin()
)
install.packages("ggridges")
install.packages("ggridges")
install.packages("ggridges")
install.packages("ggridges")
library(ggridges)
library(bayesplot)
bayesplot::mcmc_areas_ridges_data(competition)
library(ggridges)
ggplot(competition,
aes(x=parameter,
y=value,
fill= model)) +
geom_pointrange(aes(ymin=-0.1,
ymax=0.2)
)
library(ggplot2)
ggplot(competition,
aes(x=parameter,
y=value,
fill= model)) +
geom_pointrange(aes(ymin=-0.1,
ymax=0.2)
)
ggplot(competition,
aes(x=parameter,
y=value,
col= model)) +
geom_pointrange(aes(ymin=-0.1,
ymax=0.2)
)+
coord_flip()
ggplot(competition,
aes(x=parameter,
y=value,
fill= model)) +
geom_boxplot()+
coord_flip()+
theme_bw() +
theme(
strip.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15),
strip.text = element_text(size = 12),
legend.text.align = 0,
legend.position = "right",
legend.box = "vertical",
legend.margin = margin()
)
?geom_ridges
library(ggridges)
install.packages(ggridges)
install.packages("ggridges")
install.packages("ggridges")
library(ggridges)
library("bayesplot")
library("rstanarm")
library("ggplot2")
fit <- stan_glm(mpg ~ ., data = mtcars)
posterior <- as.matrix(fit)
Error in unloadNamespace(package) : namespace ‘ggridges’ is imported by ‘bayesplot’ so cannot be unloaded
library("bayesplot")
library("rstanarm")
library("ggplot2")
fit <- stan_glm(mpg ~ ., data = mtcars)
posterior <- as.matrix(fit)
?mcmc_areas
mcmc_areas(competition)
models <- vero_models
mcmc_areas(competition)
mcmc_areas(models)
competition  <- models %>% select(
alphaii,
alphaii_env,
alphaij,
alphaij_env,
alphaik,
alphaik_env
)
library(brms)
library(ggplot2)
library(bayesplot)
#We source everything known to human kind...
source("code/gg_theme.R")
source("code/read_models.R")
source("code/model_toolbox.R")
#isaacs mean estimates
gi<- 0.9641188
si<- 0.9654804
gj<- 0.4743974
sj<- 0.9693324
competition  <- models %>% select(
alphaii,
alphaii_env,
alphaij,
alphaij_env,
alphaik,
alphaik_env
)
head(models)
head(competition)
mcmc_areas(competition)
