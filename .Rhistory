source("code/integration_toolbox.R")
source("code/model_toolbox.R")
source("code/determine_radius.R")
source("code/determine_boundary.R")
#survival and germination for Vero (i) and Trcy(j)
gi<-.372
si<-.556
gj<-.258
sj<-.033
# the list of models over to iterate
vero_models <- list( vero_bh_multispecies_poisson.rds,
vero_lv_multispecies_poisson.rds,
vero_rc_multispecies_poisson.rds)
trcy_models<- list(trcy_bh_multispecies_poisson.rds,
trcy_lv_multispecies_poisson.rds,
trcy_rc_multispecies_poisson.rds)
model_grid_sunny<- combined_models(vero_models = vero_models,
trcy_models = trcy_models,
si =si,
gi =gi,
gj =gj,
sj=sj,
Ni_max = 1e4,
Nj_max =1e4,
env=FALSE,
bounded = TRUE)
saveRDS(model_grid_sunny,
file = "results.RDS")
rconstraints <- list(
lower = c(-Inf, -Inf),
upper = c(Inf, Inf)
)
rconstraints
rconstraints$lower
rconstraints$lower[1]
x_min <- ifelse(rconstraints$lower[1] == -Inf, -R_mean, rconstraints$lower[1])
R_mean <- 67
x_min <- ifelse(rconstraints$lower[1] == -Inf, -R_mean, rconstraints$lower[1])
x_min
source("code/read_models.R")
source("code/integration_toolbox.R")
source("code/model_toolbox.R")
source("code/determine_radius.R")
source("code/determine_boundary.R")
gi<-.372
si<-.556
gj<-.258
sj<-.033
ptm <- proc.time()
test_2<- posterior_feasibility(vero_model = vero_lv_multispecies_poisson.rds,
trcy_model = trcy_bh_multispecies_poisson.rds,
si = si,
gi = gi,
sj = sj,
gj = gj,
Ni_max  = 1e4,
Nj_max = 1e4,
env = TRUE,
bounded = FALSE)
proc.time() - ptm
#iterating over models
library(brms)
library(ggplot2)
library(ggpubr)
library(tidyverse)
#We source everything known to human kind...
source("code/read_models.R")
source("code/model_toolbox.R")
source("code/model_combo.R")
source("code/integration_toolbox.R")
source("code/model_toolbox.R")
source("code/determine_radius.R")
source("code/determine_boundary.R")
#survival and germination for Vero (i) and Trcy(j)
gi<-.372
si<-.556
gj<-.258
sj<-.033
# the list of models over to iterate
vero_models <- list( vero_bh_multispecies_poisson.rds,
vero_lv_multispecies_poisson.rds,
vero_rc_multispecies_poisson.rds)
trcy_models<- list(trcy_bh_multispecies_poisson.rds,
trcy_lv_multispecies_poisson.rds,
trcy_rc_multispecies_poisson.rds)
model_grid_sunny<- combined_models(vero_models = vero_models,
trcy_models = trcy_models,
si =si,
gi =gi,
gj =gj,
sj=sj,
Ni_max = 1e4,
Nj_max =1e4,
env=FALSE,
bounded = TRUE)
saveRDS(model_grid_sunny,
file = "results.RDS")
library(brms)
library(ggplot2)
library(ggpubr)
library(tidyverse)
#We source everything known to human kind...
source("code/read_models.R")
source("code/feasibility_toolbox.R")
source("code/saavedra_toolbox.R")
source("code/model_toolbox.R")
source("code/determine_radius.R")
source("code/model_combo.R")
vero_model <- vero_lv_multispecies_poisson.rds
trcy_model <- trcy_bh_multispecies_poisson.rds
#isaacs mean estimates
gi<- 0.9641188
si<- 0.9654804
gj<- 0.4743974
sj<- 0.9693324
Ni_max<- 1e4
Nj_max<- 1e4
env <-  FALSE
bounded <- TRUE
alpha <- matrix( c(0.01006203,0.003556041, 0.07510000, 0.070489992), nrow = 2, ncol = 2, byrow = TRUE)
get_integration <- function(N_max,
alpha,
bounded){
#isaacs mean estimates
gi<- 0.9641188
si<- 0.9654804
gj<- 0.4743974
sj<- 0.9693324
Ni_max<- 1e4
Nj_max<- 1e4
env <-  FALSE
if(!bounded) {
# Each model has its own constraints
rconstraints <- list(
lower = c(-Inf, -Inf),
upper = c(Inf, Inf)
)
}else{
# Each model has its own constraints
rconstraints <- list(
lower = c(vero_model$constraints[1], trcy_model$constraints[1]),
upper = c(vero_model$constraints[2], trcy_model$constraints[2])
)
}
#And each species its maximum expected abundances
Nupper <- c(i = N_max,
j = N_max)
#Which determine the Radius for each alpha matrix used
R_mean <- determine_radius(alpha = alpha,
Ni_max = N_max,
Nj_max = N_max)
omega_SA_mean <- Omega_SA(alpha = alpha_mean)
plot(0,0,
xlim=c(-R_mean,R_mean),
ylim=c(-R_mean, R_mean),
type='n',
xlab=expression(italic(r[i])),
ylab=expression(italic(r[j]))
)
abline(h=0,lty='dashed',lwd=1.5)
abline(v=0,lty='dashed',lwd=1.5)
#Now we determine the feasibility shape with our Monte Carlo Integration
integration_mean<- integrate_area(R_max = R_mean,
alpha = alpha,
rconstraints = rconstraints,
Nupper = Nupper,
n_samples = 1e4
)
#Now we determine the feasibility shape with our Monte Carlo Integration
Omega_mean <- integration_mean$proportion
#And also the coordinates of all the points that are feasible
shape_mean <- integration_mean$coords
# which tell us the bounds of the feasibility domain
shape_bounds_mean <- determine_boundary_shape(shape = shape_mean)
bounds_mean <- shape_bounds_mean$bounds
# and also the area the area of the feasibility domain
area_mean <- shape_bounds_mean$area
#we store the values of coexistence using the point estimates
mean_parameters_results <- data.frame(
"Omega_saavedraa_mean"= omega_SA_mean,
"Omega_mean"= Omega_mean,
"area_mean"= area_mean,
"R_mean"=R_mean,
"N_max"= N_max)
return(mean_parameters_results)
}
t1<- get_integration(N_max = 1000, alpha = alpha,bounded = TRUE)
library(brms)
library(ggplot2)
library(ggpubr)
library(tidyverse)
#We source everything known to human kind...
source("code/read_models.R")
source("code/feasibility_toolbox.R")
source("code/saavedra_toolbox.R")
source("code/model_toolbox.R")
source("code/determine_radius.R")
source("code/model_combo.R")
vero_model <- vero_lv_multispecies_poisson.rds
trcy_model <- trcy_bh_multispecies_poisson.rds
#isaacs mean estimates
gi<- 0.9641188
si<- 0.9654804
gj<- 0.4743974
sj<- 0.9693324
Ni_max<- 1e4
Nj_max<- 1e4
env <-  FALSE
bounded <- TRUE
alpha <- matrix( c(0.01006203,0.003556041, 0.07510000, 0.070489992), nrow = 2, ncol = 2, byrow = TRUE)
#isaacs mean estimates
gi<- 0.9641188
si<- 0.9654804
gj<- 0.4743974
sj<- 0.9693324
Ni_max<- 1e4
Nj_max<- 1e4
env <-  FALSE
if(!bounded) {
# Each model has its own constraints
rconstraints <- list(
lower = c(-Inf, -Inf),
upper = c(Inf, Inf)
)
}else{
# Each model has its own constraints
rconstraints <- list(
lower = c(vero_model$constraints[1], trcy_model$constraints[1]),
upper = c(vero_model$constraints[2], trcy_model$constraints[2])
)
}
#And each species its maximum expected abundances
Nupper <- c(i = N_max,
j = N_max)
#Which determine the Radius for each alpha matrix used
R_mean <- determine_radius(alpha = alpha,
Ni_max = N_max,
Nj_max = N_max)
omega_SA_mean <- Omega_SA(alpha = alpha_mean)
plot(0,0,
xlim=c(-R_mean,R_mean),
ylim=c(-R_mean, R_mean),
type='n',
xlab=expression(italic(r[i])),
ylab=expression(italic(r[j]))
)
abline(h=0,lty='dashed',lwd=1.5)
abline(v=0,lty='dashed',lwd=1.5)
#Now we determine the feasibility shape with our Monte Carlo Integration
integration_mean<- integrate_area(R_max = R_mean,
alpha = alpha,
rconstraints = rconstraints,
Nupper = Nupper,
n_samples = 1e4
)
N_max <- 1e4
#isaacs mean estimates
gi<- 0.9641188
si<- 0.9654804
gj<- 0.4743974
sj<- 0.9693324
Ni_max<- 1e4
Nj_max<- 1e4
env <-  FALSE
if(!bounded) {
# Each model has its own constraints
rconstraints <- list(
lower = c(-Inf, -Inf),
upper = c(Inf, Inf)
)
}else{
# Each model has its own constraints
rconstraints <- list(
lower = c(vero_model$constraints[1], trcy_model$constraints[1]),
upper = c(vero_model$constraints[2], trcy_model$constraints[2])
)
}
#And each species its maximum expected abundances
Nupper <- c(i = N_max,
j = N_max)
#Which determine the Radius for each alpha matrix used
R_mean <- determine_radius(alpha = alpha,
Ni_max = N_max,
Nj_max = N_max)
omega_SA_mean <- Omega_SA(alpha = alpha_mean)
R_mean
integration_mean<- integrate_area(R_max = R_mean,
alpha = alpha,
rconstraints = rconstraints,
Nupper = Nupper,
n_samples = 1e4
)
integration_mean
Omega_mean <- integration_mean$proportion
plot(0,0,
xlim=c(-R_mean,R_mean),
ylim=c(-R_mean, R_mean),
type='n',
xlab=expression(italic(r[i])),
ylab=expression(italic(r[j]))
)
abline(h=0,lty='dashed',lwd=1.5)
abline(v=0,lty='dashed',lwd=1.5)
plot(0,0,
xlim=c(-4,4),
ylim=c(-4,4),
type='n',
xlab=expression(italic(r[i])),
ylab=expression(italic(r[j]))
)
abline(h=0,lty='dashed',lwd=1.5)
abline(v=0,lty='dashed',lwd=1.5)
shape_mean <- integration_mean$coords
shape_bounds_mean <- determine_boundary_shape(shape = shape_mean)
bounds_mean <- shape_bounds_mean$bounds
bounds_mean
lines(bounds_mean$ri, bounds_mean$rj)
plot(0,0,
xlim=c(-4,4),
ylim=c(-4,12),
type='n',
xlab=expression(italic(r[i])),
ylab=expression(italic(r[j]))
)
abline(h=0,lty='dashed',lwd=1.5)
abline(v=0,lty='dashed',lwd=1.5)
lines(bounds_mean$ri, bounds_mean$rj)
plot(0,0,
xlim=c(-4,4),
ylim=c(-4,12),
type='n',
xlab=expression(italic(r[i])),
ylab=expression(italic(r[j]))
)
abline(h=0,lty='dashed',lwd=1.5)
abline(v=0,lty='dashed',lwd=1.5)
R_mean
alpha_mean <- alpha
integration_mean<- integrate_area(R_max = R_mean,
alpha = alpha_mean,
rconstraints = rconstraints,
Nupper = Nupper,
n_samples = 1e6
)
integration_mean<- integrate_area(R_max = R_mean,
alpha = alpha_mean,
rconstraints = rconstraints,
Nupper = Nupper,
n_samples = 5e5
)
integration_mean<- integrate_area(R_max = R_mean,
alpha = alpha_mean,
rconstraints = rconstraints,
Nupper = Nupper,
n_samples = 2e5
)
install.packages("gMOIP")
library("gMOIP")
remotes::install_github("relund/gMOIP")
install.packages("RcppGls")
install.packages("RcppGlS")
install.packages(‘RcppGSL’)
install.packages("Rfast")
install.packages(RcppGSL)
install.packages("RcppGSL")
unfeasible_mean <- integration_mean$unfeasible
unfeasible <- unfeasible_mean
shape <- shape_mean
prop <- sp::point.in.polygon(point.x = unfeasible$ri,
point.y = unfeasible$rj,
pol.x = shape$ri,pol.y = shape$rj)
prop
mean(prop)
calculate_convex <-function(shape,
unfeasible){
prop <- sp::point.in.polygon(point.x = unfeasible$ri,
point.y = unfeasible$rj,
pol.x = shape$ri,
pol.y = shape$rj)
return(  mean(prop))
}
Omega_mean <- integration_mean$proportion
#And also the coordinates of all the points that are feasible
shape_mean <- integration_mean$coords
#and the points that are unfeasible
unfeasible_mean <- integration_mean$unfeasible
# which tell us the bounds of the feasibility domain
shape_bounds_mean <- determine_boundary_shape(shape = shape_mean)
bounds_mean <- shape_bounds_mean$bounds
# and also the area the area of the feasibility domain
area_mean <- shape_bounds_mean$area
#with the bounds we can then get the distance from the limit of our growth rates
distances_mean <- distance_from_limit(r=r_mean,
shape = bounds_mean,
feasibility = feasiblity_mean)
distance_growth_mean <- distances_mean$growth_distance
distance_center_mean <- distances_mean$center_distance
#but also we get the proportion of things inside the convex hull
convex_mean <- calculate_convex(shape = bounds_mean,
unfeasible = unfeasible_mean)
r_mean <- c(0.5,0.5)
Omega_mean <- integration_mean$proportion
#And also the coordinates of all the points that are feasible
shape_mean <- integration_mean$coords
#and the points that are unfeasible
unfeasible_mean <- integration_mean$unfeasible
# which tell us the bounds of the feasibility domain
shape_bounds_mean <- determine_boundary_shape(shape = shape_mean)
bounds_mean <- shape_bounds_mean$bounds
# and also the area the area of the feasibility domain
area_mean <- shape_bounds_mean$area
#with the bounds we can then get the distance from the limit of our growth rates
distances_mean <- distance_from_limit(r=r_mean,
shape = bounds_mean,
feasibility = feasiblity_mean)
distance_growth_mean <- distances_mean$growth_distance
distance_center_mean <- distances_mean$center_distance
#but also we get the proportion of things inside the convex hull
convex_mean <- calculate_convex(shape = bounds_mean,
unfeasible = unfeasible_mean)
feasibility_mean<- FALSE
Omega_mean <- integration_mean$proportion
#And also the coordinates of all the points that are feasible
shape_mean <- integration_mean$coords
#and the points that are unfeasible
unfeasible_mean <- integration_mean$unfeasible
# which tell us the bounds of the feasibility domain
shape_bounds_mean <- determine_boundary_shape(shape = shape_mean)
bounds_mean <- shape_bounds_mean$bounds
# and also the area the area of the feasibility domain
area_mean <- shape_bounds_mean$area
#with the bounds we can then get the distance from the limit of our growth rates
distances_mean <- distance_from_limit(r=r_mean,
shape = bounds_mean,
feasibility = feasiblity_mean)
distance_growth_mean <- distances_mean$growth_distance
distance_center_mean <- distances_mean$center_distance
#but also we get the proportion of things inside the convex hull
convex_mean <- calculate_convex(shape = bounds_mean,
unfeasible = unfeasible_mean)
source("code/read_models.R")
source("code/feasibility_toolbox.R")
source("code/saavedra_toolbox.R")
source("code/model_toolbox.R")
source("code/determine_radius.R")
#
# gi<-.372
# si<-.556
# gj<-.258
# sj<-.033
#isaacs mean estimates
gi<- 0.9641188
si<- 0.9654804
gj<- 0.4743974
sj<- 0.9693324
ptm <- proc.time()
source("code/read_models.R")
source("code/feasibility_toolbox.R")
source("code/saavedra_toolbox.R")
source("code/model_toolbox.R")
source("code/determine_radius.R")
#
# gi<-.372
# si<-.556
# gj<-.258
# sj<-.033
#isaacs mean estimates
gi<- 0.9641188
si<- 0.9654804
gj<- 0.4743974
sj<- 0.9693324
ptm <- proc.time()
test_2<- posterior_feasibility(vero_model = vero_lv_multispecies_poisson.rds,
trcy_model = trcy_lv_multispecies_poisson.rds,
si = si,
gi = gi,
sj = sj,
gj = gj,
Ni_max  = 1e3,
Nj_max = 1e3,
env = TRUE,
bounded = TRUE)
proc.time() - ptm
test_2
5e5
library(brms)
source("code/clean_data.R")
vero_focal
plot(vero_focal$verotreatment, vero_focal$trcytreatment)
plot(vero_focal$verotreatment, vero_focal$conspecifics)
plot(vero_focal$heterospecifics, vero_focal$conspecifics)
vero_focal$verotreatment
vero_focal %>% filter( verotreatment== "L")
vero_focal %>% filter( verotreatment== "L") %>% select (verotreatment, veroplanted)
trcy_focal %>% filter( trcytreatment== "L") %>% select (trcytreatment, trcyplanted)
vero_focal %>% filter( verotreatment== "M") %>% select (verotreatment, veroplanted)
trcy_focal %>% filter( trcytreatment== "M") %>% select (trcytreatment, trcyplanted)
vero_focal %>% filter( verotreatment== "H") %>% select (verotreatment, veroplanted)
trcy_focal %>% filter( trcytreatment== "H") %>% select (trcytreatment, trcyplanted)
vero_focal %>% filter( verotreatment== "L") %>% select (verotreatment, veroplanted)
unique(vero_focal$trcytreatment)
unique(trcy_focal$verotreatment)
vero_focal %>% filter( trcytreatment== "M") %>% select (trcytreatment, trcyplanted)
head(vero_focal)
plot(trcy_focal$conspecifics, trcy_focal$totalseeds)
50 ^2
2500 * 100
2e5
172 ^2
29584 * 100
29584 * 50
52^2
